// Defines the structure for logging application errors.
model LogError {
  id          String   @id @default(uuid()) // Unique identifier for the error log.
  timestamp   DateTime @default(now()) @db.Timestamp(0) // The date and time when the error occurred.
  statusCode  Int? // HTTP status code associated with the error, if applicable.
  path        String? // The request path that caused the error.
  method      String? // The HTTP method of the request (e.g., GET, POST).
  message     String   @db.Text // A descriptive message of the error.
  stackTrace  String?  @db.Text // The stack trace of the error for debugging.
  ipAddress   String? // The IP address of the client that made the request.
  userId      Int? // The ID of the user who was logged in when the error occurred.
  requestBody String?  @db.Text // The request body, if available and relevant.

  @@map("log_errors") // Maps this model to the 'log_errors' table in the database.
}

// Records login attempts, both successful and unsuccessful.
model LogLogin {
  id         String   @id @default(uuid()) // Unique identifier for the login log.
  userId     Int // The ID of the user attempting to log in.
  timestamp  DateTime @default(now()) @db.Timestamp(0) // The date and time of the login attempt.
  ipAddress  String? // The IP address from which the login attempt was made.
  userAgent  String?  @db.Text // The user agent string of the client.
  successful Boolean // Indicates if the login attempt was successful (true) or failed (false).
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Establishes a relation to the User model.

  @@index([userId]) // Creates an index on the userId field for faster lookups.
  @@index([timestamp]) // Creates an index on the timestamp field for chronological queries.
  @@map("log_logins") // Maps this model to the 'log_logins' table in the database.
}

// Defines a maintenance request, representing a formal demand for maintenance services.
model MaintenanceRequest {
  id              Int             @id @default(autoincrement()) // Unique identifier for the maintenance request.
  protocolNumber  String          @unique @default(uuid()) // A unique protocol number for tracking the request.
  title           String // A brief title summarizing the request.
  description     String          @db.Text // Detailed description of the maintenance issue or request.
  priority        RequestPriority @default(NORMAL) // The urgency level of the request.
  requestedAt     DateTime        @default(now()) // The date and time when the request was made.
  deadline        DateTime? // The target date for completing the request.
  solutionDetails String?         @db.Text // Details about the solution provided for the request.
  completedAt     DateTime? // The date and time when the request was completed.

  currentMaintenanceInstanceId Int // Foreign key to the current maintenance instance handling this request.
  currentMaintenanceInstance   MaintenanceInstance @relation("CurrentInstanceRequests", fields: [currentMaintenanceInstanceId], references: [id]) // Relation to the MaintenanceInstance model.

  createdById Int // Foreign key to the user who formally opened this request.
  createdBy   User @relation("CreatedByUser", fields: [createdById], references: [id]) // Relation to the User model (who created the request).

  assignedToId Int? // Foreign key to the user (technician) assigned to this request.
  assignedTo   User? @relation("AssignedToUser", fields: [assignedToId], references: [id]) // Relation to the User model (who is assigned).

  equipmentId Int? // Foreign key to the equipment related to this request.
  equipment   Equipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull) // Relation to the Equipment model.

  serviceTypeId Int? // Foreign key to the type of service required for this request.
  serviceType   SipacServiceTypeManutencao? @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull) // Relation to the SipacServiceTypeManutencao model.

  statusId      Int // Foreign key to the current status of the maintenance request.
  status        MaintenanceRequestStatus        @relation(fields: [statusId], references: [id]) // Relation to the MaintenanceRequestStatus model.
  currentStatus MaintenanceRequestStatusOptions @default(PENDING)

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  // Relations
  // Infrastructure occurrences that originated this request.
  originatingOccurrences InfrastructureOccurrence[] @relation("OriginatingOccurrences")

  // History of events/actions related to this request.
  timelineEvents MaintenanceTimelineEvent[]

  // Material requests associated with this maintenance request.
  materialRequests       MaterialRequest[]
  materialStockMovements MaterialStockMovement[]
  materialWithdrawals    MaterialWithdrawal[]

  @@index([currentMaintenanceInstanceId]) // Index for faster lookups by maintenance instance.
  @@index([createdById]) // Index for faster lookups by creator.
  @@index([assignedToId]) // Index for faster lookups by assigned user.
  @@index([statusId]) // Index for faster lookups by status.
  @@map("maintenance_requests") // Maps this model to the 'maintenance_requests' table.
}

// Defines the priority levels for maintenance requests.
enum RequestPriority {
  LOW // Low priority.
  NORMAL // Normal priority.
  HIGH // High priority.
  URGENT // Urgent priority, requiring immediate attention.
}

// Defines the possible statuses for a maintenance request.
model MaintenanceRequestStatus {
  id          Int      @id @default(autoincrement()) // Unique identifier for the status.
  name        String   @unique // The name of the status (e.g., "Open", "In Analysis", "Completed").
  description String? // A detailed description of the status.
  isFinal     Boolean  @default(false) // Indicates if this status marks the end of a request (e.g., "Completed", "Cancelled").
  order       Int      @default(0) // Order for display in user interfaces.
  createdAt   DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt   DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  maintenanceRequests MaintenanceRequest[] // Relation to MaintenanceRequest, indicating requests with this status.

  @@map("maintenance_request_statuses") // Maps this model to the 'maintenance_request_statuses' table.
}

enum MaintenanceRequestStatusOptions {
  //TODO: need corrections
  SIPAC_HANDLING // Status gerenciado pelo sipac
  PENDING // Request is pending approval.
  APPROVED // Request has been approved.
  PARTIALLY_ATTENDED // Request has been partially fulfilled.
  FULLY_ATTENDED // Request has been fully fulfilled.
  REJECTED // Request has been rejected.
  CANCELLED // Request has been cancelled.
}

// Records historical events and actions within a MaintenanceRequest.
model MaintenanceTimelineEvent {
  id          Int               @id @default(autoincrement()) // Unique identifier for the timeline event.
  type        TimelineEventType @default(COMMENT) // The type of event or action (e.g., comment, status change).
  description String            @db.Text // Detailed description of the action (e.g., comment text, reason for transfer).
  eventData   Json? // JSON field to store structured data related to the event (e.g., { oldStatus: "X", newStatus: "Y" }).
  occurredAt  DateTime          @default(now()) // The date and time when the event occurred.

  // Foreign Keys
  maintenanceRequestId Int // Foreign key to the associated maintenance request.
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade) // Relation to the MaintenanceRequest model.

  // User who performed the action/registered the event.
  actionById Int
  actionBy   User @relation("ActionByUser", fields: [actionById], references: [id])

  // Specific fields for instance transfer.
  transferredFromInstanceId Int?
  transferredToInstanceId   Int?
  transferredFromInstance   MaintenanceInstance? @relation("TransferredFromInstanceEvents", fields: [transferredFromInstanceId], references: [id], onDelete: SetNull) // Relation to the MaintenanceInstance from which it was transferred.
  transferredToInstance     MaintenanceInstance? @relation("TransferredToInstanceEvents", fields: [transferredToInstanceId], references: [id], onDelete: SetNull) // Relation to the MaintenanceInstance to which it was transferred.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  @@index([maintenanceRequestId]) // Index for faster lookups by maintenance request.
  @@index([actionById]) // Index for faster lookups by actioning user.
  @@index([type]) // Index for faster lookups by event type.
  @@index([transferredFromInstanceId]) // Index for faster lookups by source instance.
  @@index([transferredToInstanceId]) // Index for faster lookups by destination instance.
  @@map("maintenance_timeline_events") // Maps this model to the 'maintenance_timeline_events' table.
}

// Defines the types of events that can occur in a maintenance request timeline.
enum TimelineEventType {
  CREATION // Maintenance Request Created.
  COMMENT // A comment was added.
  STATUS_CHANGE // The status of the Maintenance Request changed.
  PRIORITY_CHANGE // The priority of the Maintenance Request changed.
  ASSIGNMENT // A technician was assigned.
  UNASSIGNMENT // A technician assignment was removed.
  TRANSFER_INITIATED // Transfer between maintenance instances initiated.
  SOLUTION_REGISTERED // Solution for the Maintenance Request registered.
  MATERIAL_REQUESTED // Material request created.
  MATERIAL_STATUS_CHANGED // Status of material request altered (approved, received, etc.).
  DEADLINE_CHANGED // Deadline altered.
  CLOSED // Maintenance Request Closed.
  REOPENED // Maintenance Request Reopened.
  LINKED_INFRA_OCCURRENCE // Linked an InfrastructureOccurrence.
  UNLINKED_INFRA_OCCURRENCE // Unlinked an InfrastructureOccurrence.
}

// Represents a specific maintenance instance or department within an IFES.
model MaintenanceInstance {
  id        Int      @id @default(autoincrement()) // Unique identifier for the maintenance instance.
  sipacId   String?  @unique // Unique identifier from the SIPAC system.
  name      String?  @unique // Name of the maintenance instance (e.g., "DIMAN/INFRA").
  isActive  Boolean  @default(true) // Indicates if the instance is currently active.
  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  currentMaintenanceRequests    MaintenanceRequest[]       @relation("CurrentInstanceRequests") // Maintenance requests currently handled by this instance.
  timelineEventsTransferredFrom MaintenanceTimelineEvent[] @relation("TransferredFromInstanceEvents") // Timeline events where this instance was the source of a transfer.
  timelineEventsTransferredTo   MaintenanceTimelineEvent[] @relation("TransferredToInstanceEvents") // Timeline events where this instance was the destination of a transfer.
  warehouses                    Warehouse[] // Warehouses associated with this maintenance instance.

  @@index([sipacId]) // Index for faster lookups by SIPAC ID.
  @@map("maintenance_instances") // Maps this model to the 'maintenance_instances' table.
}

// Defines types of services that can be requested for maintenance.
model SipacServiceTypeManutencao {
  id          Int      @id @default(autoincrement()) // Unique identifier for the service type.
  name        String   @unique // Name of the service type (e.g., "Electrical", "Plumbing").
  description String? // Description of the service type.
  isActive    Boolean  @default(true) // Indicates if the service type is active.
  createdAt   DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt   DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  maintenanceRequests MaintenanceRequest[] // Maintenance requests associated with this service type.

  @@map("sipac_service_types_manutencao") // Maps this model to the 'service_types' table.
}

// Represents an equipment asset that may require maintenance.
model Equipment {
  id              Int       @id @default(autoincrement()) // Unique identifier for the equipment.
  patrimonyTag    String?   @unique // Unique patrimony or asset tag number.
  name            String // Name of the equipment.
  description     String?   @db.Text // Detailed description of the equipment.
  location        String? // Physical location of the equipment.
  serialNumber    String? // Serial number of the equipment.
  manufacturer    String? // Manufacturer of the equipment.
  model           String? // Model of the equipment.
  acquisitionDate DateTime? // Date when the equipment was acquired.
  isActive        Boolean   @default(true) // Indicates if the equipment is currently active/in use.
  createdAt       DateTime  @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt       DateTime  @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  maintenanceRequests MaintenanceRequest[] // Maintenance requests related to this equipment.

  @@map("equipments") // Maps this model to the 'equipments' table.
}

// Records an initial observation or problem in the infrastructure or equipment.
// An occurrence may or may not lead to a formal MaintenanceRequest.
model InfrastructureOccurrence {
  id                  Int                            @id @default(autoincrement()) // Unique identifier for the infrastructure occurrence.
  title               String // A brief title for the occurrence.
  description         String                         @db.Text // Detailed description of the observed problem.
  locationDescription String? // Textual description of the location (e.g., "Corridor of Block B, near room 203").
  reportedAt          DateTime                       @default(now()) // The date and time when the occurrence was reported.
  status              InfrastructureOccurrenceStatus @default(REPORTED) // The current status of the occurrence.
  resolutionNotes     String?                        @db.Text // Notes on how the occurrence was resolved, if without a formal Maintenance Request.

  // Foreign Keys
  // User who reported the occurrence.
  reportedById Int
  reportedBy   User @relation("ReportedOccurrences", fields: [reportedById], references: [id])

  // If this occurrence generated or was linked to a Maintenance Request.
  maintenanceRequestId Int? // Optional, as not all occurrences become a Maintenance Request.
  maintenanceRequest   MaintenanceRequest? @relation("OriginatingOccurrences", fields: [maintenanceRequestId], references: [id], onDelete: SetNull) // Relation to the MaintenanceRequest model.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  @@index([reportedById]) // Index for faster lookups by reporting user.
  @@index([maintenanceRequestId]) // Index for faster lookups by associated maintenance request.
  @@index([status]) // Index for faster lookups by status.
  @@map("infrastructure_occurrences") // Maps this model to the 'infrastructure_occurrences' table.
}

// Defines the possible statuses for an infrastructure occurrence.
enum InfrastructureOccurrenceStatus {
  REPORTED // Newly reported, awaiting analysis.
  ANALYZING // Under analysis to decide if it becomes a Maintenance Request.
  ACCEPTED // Accepted, linked to an MR or awaiting MR creation.
  DISMISSED // Rejected/Discarded (e.g., duplicate, not valid).
  RESOLVED // Resolved without the need for a formal Maintenance Request (quick action).
}

//Centro de distribuição, controle físico e financeiro de materiais
// Não é vinculado a uma instância de manutenção específica, na verdade, pode atender (e atende) várias instâncias
// A gestão do centro de distribuição está mais próxima do departamento financeiro do que do departamento de manutencão
//Nessa implementação não será dado destaque à gestão do Storage (centro de distribuição) será considerada como uma entidade externa
model Storage {
  id   Int    @id @default(autoincrement()) // Unique identifier.
  name String

  //relations
  materialRequests MaterialRequest[]

  @@map("storages")
}

// Represents a physical or logical location where materials are stored.
// depósito transitório, controle apenas físico de materiais 
model Warehouse {
  id       Int     @id @default(autoincrement()) // Unique identifier for the warehouse.
  name     String  @unique // Name of the warehouse (e.g., "Central Warehouse Block A").
  code     String? @unique // Optional unique code for the warehouse.
  location String? // Physical location description of the warehouse.
  //TODO: building to replace location
  isActive Boolean @default(true) // Indicates if the warehouse is currently active.

  // Each warehouse belongs to one maintenance instance.
  maintenanceInstanceId Int // Foreign key to the maintenance instance this warehouse belongs to.
  maintenanceInstance   MaintenanceInstance @relation(fields: [maintenanceInstanceId], references: [id]) // Relation to the MaintenanceInstance model.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  // Relations
  standardMaterialStocks         MaterialWarehouseStock[] // Stock levels for "new" materials in this warehouse.
  materialDerived                MaterialDerived[] // Instances/batches of derived materials in this warehouse.
  stockMovements                 MaterialStockMovement[] // Stock movements related to this warehouse.
  materialTransfersFromWarehouse MaterialTransferOrder[]    @relation("TransfersFromWarehouse")
  materialTransfersToWarehouse   MaterialTransferOrder[]    @relation("TransfersToWarehouse")
  materialPickingOrders          MaterialPickingOrder[]
  materialWithdrawals            MaterialWithdrawal[]
  materialReceipts               MaterialReceipt[]          @relation("ReceiptsAtWarehouse")
  materialRestrictionOrders      MaterialRestrictionOrder[]

  @@index([maintenanceInstanceId]) // Index for faster lookups by maintenance instance.
  @@map("warehouses") // Maps this model to the 'warehouses' table.
}

// A global, system-wide catalog of all possible materials.
// Only system administrators can modify this table.
model MaterialGlobalCatalog {
  id            String  @id // Unique identifier for the material.
  // code          String? @unique // A unique global code for the material. @map("sipacCode")
  codeSidec     String?
  name          String  @db.VarChar(255) // The name of the material.
  description   String? @db.Text // Detailed description of the material.
  unitOfMeasure String // The standard unit of measure for this material (e.g., "UNIT", "KG").
  groupId       Int? // The category id of the material (e.g., "Electrical", "Hydraulic"). @map("categoryId")
  subGroupId    Int?
  photoUrl      String? // URL to an image representing the material.
  isActive      Boolean @default(true) // Indicates if the material is active in the global catalog.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  // Relations
  warehouseStandardStocks         MaterialWarehouseStock[] // Stock levels of this material in various warehouses.
  materialsDerived                MaterialDerived[]              @relation("GlobalMaterialLink") // Derived material instances linked to this global material.
  materialRequestItems            MaterialRequestItem[]          @relation("RequestedGlobalMaterial") // Material request items that request this global material.
  materialStockMovements          MaterialStockMovement[]        @relation("GlobalMaterialMovements") // Stock movements related to this global material.
  materialStockTransferOrderItems MaterialTransferOrderItem[]
  materialWithdrawalItems         MaterialWithdrawalItem[]
  materialReceiptItems            MaterialReceiptItem[]
  materialRestrictionOrderItems   MaterialRestrictionOrderItem[]

  // @@index([code]) // Index for faster lookups by global code.
  @@map("material_global_catalog") // Maps this model to the 'materials_global_catalog' table.
}

// Represents the stock level of a "new" (standard) material in a specific warehouse.
// This table also serves as a local material catalog for each warehouse.
model MaterialWarehouseStock {
  id Int @id @default(autoincrement()) // Unique identifier for the warehouse material stock record.

  // Foreign keys identifying the material and the warehouse.
  warehouseId Int // Foreign key to the warehouse.
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

  materialId String // Foreign key to the global material.
  material   MaterialGlobalCatalog @relation(fields: [materialId], references: [id], onDelete: Restrict) // Relation to the Material model.

  // Stock Level Types
  physicalOnHandQuantity Decimal  @default(0) @db.Decimal(12, 3) // Total physical quantity of the material currently in this warehouse.
  initialStockQuantity   Decimal? @db.Decimal(12, 3) // Initial stock recorded upon system implementation or first entry.
  restrictedQuantity     Decimal  @default(0) @db.Decimal(12, 3) // Quantity committed to a specific, paid-for maintenance request.
  reservedQuantity       Decimal  @default(0) @db.Decimal(12, 3) // Quantity allocated for a specific demand, making it unavailable for others.

  // Other local information
  locationInWarehouse String? // Specific location within the warehouse (e.g., "Shelf A, Aisle 3").
  minStockLevel       Decimal?  @db.Decimal(12, 3) // Reorder point for this material in this warehouse.
  maxStockLevel       Decimal?  @db.Decimal(12, 3) // Maximum desired stock level.
  lastStockCountDate  DateTime? // Date of the last physical stock count.
  averageCost         Decimal?  @db.Decimal(12, 4) // Average cost of the material in this warehouse.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record (e.g., when stock levels change).

  // Relations
  stockMovements MaterialStockMovement[] // Stock movements that affect this "new" material stock.

  // A material can only have one stock record per warehouse.
  @@unique([warehouseId, materialId], name: "unique_warehouse_material_standard_stock") // Ensures unique stock record per warehouse and material.
  @@index([materialId]) // Index for faster lookups by material.
  @@map("material_warehouse_stocks") // Maps this model to the 'warehouse_material_stocks' table.
}

// Represents a request for materials needed for a maintenance request or just for inventory.
model MaterialRequest {
  id             Int    @id @default(autoincrement()) // Unique identifier for the material request.
  protocolNumber String @unique @default(uuid()) // A unique protocol number for tracking the request.

  // Defines if the request is for new materials or derived materials.
  requestType MaterialRequestType    @default(NEW_MATERIALS)
  purpose     MaterialRequestPurpose @default(SUPPLY_MAINTENANCE)

  justification        String?             @db.Text // Justification for the material request.
  requestDate          DateTime            @default(now()) // The date and time when the request was made.
  maintenanceRequestId Int? // Foreign key to the associated maintenance request.
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id]) // Relation to the MaintenanceRequest model.

  requestedById Int? // Foreign key to the user who requested the materials.
  requestedBy   User? @relation("MaterialRequestedByUser", fields: [requestedById], references: [id]) // Relation to the User model (who requested).

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  //campos compatibilidade sipac
  //unidades
  sipacUnitRequestingId Int?
  sipacUnitRequesting   SipacUnidade? @relation("unidadeRequisitanteMaterialRequest", fields: [sipacUnitRequestingId], references: [id])
  sipacUnitCostId       Int?
  sipacUnitCost         SipacUnidade? @relation("unidadeCustoMaterialRequest", fields: [sipacUnitCostId], references: [id])

  origin                MaterialRequestOrigin @default(SISMAN) // Origem da requisicao
  sipacUserLoginRequest String? // usuario que realizou a requisicao

  //
  requestValue Decimal? @db.Decimal(12, 4) //valor da requisicao
  servedValue  Decimal? @db.Decimal(12, 4) //valor atendido

  // Relations
  restrictionOrders MaterialRestrictionOrder[] @relation("RestrictionsForMaterialRequest")

  // Items included in this material request. All items must adhere to the requestType of the header.
  items         MaterialRequestItem[]
  statusHistory MaterialRequestStatus[] // History of status changes for this request
  currentStatus MaterialRequestStatusOptions @default(PENDING) // The current status of the request.

  // Other relations
  storageId Int
  storage   Storage @relation(fields: [storageId], references: [id]) // Relation to the storage model.

  materialPickingOrders MaterialPickingOrder[]
  materialWithdrawals   MaterialWithdrawal[]

  @@index([maintenanceRequestId]) // Index for faster lookups by maintenance request.
  @@index([requestedById]) // Index for faster lookups by requesting user.
  @@index([requestType]) // Index for faster lookups by request type.
  @@map("material_requests") // Maps this model to the 'material_requests' table.
}

enum MaterialRequestOrigin {
  SIPAC
  SISMAN
}

enum MaterialRequestPurpose {
  SUPPLY_WAREHOUSE   @map("ALMOXARIFADO") //abastecimento de almoxarifado, óleos, brocas, etc
  SUPPLY_MAINTENANCE @map("MANUTENCAO") //atendimento direcionado a requisição de manutenção
}

// Defines the type of materials being requested in a MaterialRequest.
enum MaterialRequestType {
  NEW_MATERIALS     @map("MATERIAIS NOVOS") // This request is EXCLUSIVELY for new materials from the global catalog.
  DERIVED_MATERIALS @map("MATERIAIS DERIVADOS") // This request is EXCLUSIVELY for derived/repurposed materials.
}

// Defines the possible statuses for a MaterialRequest.
enum MaterialRequestStatusOptions {
  SIPAC_HANDLING     @map("GERENCIADA PELO SIPAC") // Status gerenciado pelo sipac
  REGISTERED         @map("CADASTRADA")
  PENDING            @map("PENDENTE DE AUTORIZACAO") // Request is pending approval.
  CHANGE_SPONSOR     @map("ALTERADA UNIDADE DE CUSTO")
  APPROVED           @map("AUTORIZADA") // Request has been approved.
  FORWARDED          @map("ENCAMINHADA")
  PARTIALLY_ATTENDED @map("PARCIALMENTE ATENDIDA") // Request has been partially fulfilled.
  FULLY_ATTENDED     @map("TOTALMENTE ATENDIDA") // Request has been fully fulfilled.
  REJECTED           @map("REJEITADA") // Request has been rejected.
  CANCELLED          @map("CANCELADA") // Request has been cancelled.
  REVERSED           @map("ESTORNADA") // Request has been reversed.
  MATERIAL_SENT      @map("MATERIAIS DESPACHADOS")
  MATERIAL_RECEIVED  @map("MATERIAIS RECEBIDOS")
}

// Stores the history of status changes for a MaterialRequest.
model MaterialRequestStatus {
  id                Int                          @id @default(autoincrement())
  materialRequestId Int // Foreign key to the MaterialRequest.
  materialRequest   MaterialRequest              @relation(fields: [materialRequestId], references: [id], onDelete: Cascade) // Relation to the MaterialRequest model.
  status            MaterialRequestStatusOptions // The status set at this point in time.

  changedById Int? // User who made this status change (e.g., approver, requester for cancellation).
  changedBy   User? @relation("MaterialRequestStatusChangedBy", fields: [changedById], references: [id], onDelete: SetNull) // Relation to the User model.

  changeDate DateTime @default(now()) @db.Timestamp(0) // Timestamp for when this status was set.
  notes      String?  @db.Text // Notes related to this status change (e.g., approval notes, rejection reason).

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the history record was created.

  @@index([materialRequestId])
  @@index([status])
  @@index([changedById])
  @@map("material_request_statuses")
}

// Represents an individual item within a MaterialRequest.
model MaterialRequestItem {
  id Int @id @default(autoincrement()) // Unique identifier for the material request item.

  materialRequestId Int // Foreign key to the parent material request.
  materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id], onDelete: Cascade) // Relation to the MaterialRequest model.

  requestType MaterialRequestItemType @default(GLOBAL_CATALOG) // Indicates the type of material being requested (global catalog or derived).

  // If MaterialRequest.requestType = NEW_MATERIALS, this item MUST reference a global catalog material.
  requestedGlobalMaterialId String? // Foreign key to the Material (global catalog).
  requestedGlobalMaterial   MaterialGlobalCatalog? @relation("RequestedGlobalMaterial", fields: [requestedGlobalMaterialId], references: [id]) // Relation to the Material model.

  // If MaterialRequest.requestType = DERIVED_MATERIALS, this item MUST describe the desired derived material.
  // Fulfillment Information (filled by warehouse staff)
  // If a specific instance was used to fulfill this item.
  fulfilledByInstanceId Int?
  fulfilledByInstance   MaterialDerived? @relation("FulfilledByInstance", fields: [fulfilledByInstanceId], references: [id], onDelete: SetNull) // Relation to the MaterialInstance model.
  // requestedDerivedName        String? // Name of the desired derived material.
  // requestedDerivedConditionId Int? // Desired condition for the derived material.
  // requestedDerivedCondition   MaterialInstanceCondition? @relation("RequestedDerivedCondition", fields: [requestedDerivedConditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

  quantityRequested Decimal  @db.Decimal(10, 3) // The quantity of material requested.
  quantityApproved  Decimal? @db.Decimal(10, 3) // The quantity approved by the manager.
  quantityDelivered Decimal  @default(0) @db.Decimal(10, 3) // The quantity effectively delivered.
  // unitOfMeasure     String // The unit of measure for the requested quantity.

  notes String? @db.Text // Observations from the requester or warehouse staff for this item.

  stockMovements MaterialStockMovement[] // Stock movements that fulfilled this item.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  pickingOrders MaterialPickingOrder[]

  materialRestrictionOrderItems MaterialRestrictionOrderItem[] @relation("RestrictionsForRequestItem")
  materialPickingOrderItems     MaterialPickingOrderItem[]
  materialWithdrawalsItems      MaterialWithdrawalItem[]       @relation("WithdrawalForRequestItem")

  @@unique([materialRequestId, requestedGlobalMaterialId])
  @@map("material_request_items") // Maps this model to the 'material_request_items' table.
}

// Defines the type of material requested within a MaterialRequestItem.
enum MaterialRequestItemType {
  GLOBAL_CATALOG   @map("CATALOGO GLOBAL") // Request for a new/standard item from the global catalog.
  DERIVED_MATERIAL @map("MATERIAL DERIVADO") // Request for a derived material (e.g., leftover, processed).

  @@map("material_request_item_types")
}

// Defines different types of stock movements, offering more flexibility than an enum.
model MaterialStockMovementType {
  id          Int                        @id @default(autoincrement()) // Unique identifier for the stock movement type.
  code        String                     @unique // Short code for the type (e.g., "ENTRY_PURCHASE", "EXIT_USAGE").
  name        String // User-friendly name (e.g., "Entry from Purchase", "Exit for Usage").
  description String?                    @db.Text // Detailed description of the movement type.
  operation   MaterialStockOperationType // Defines if it's an IN (increase), OUT (decrease), or ADJUSTMENT.
  isActive    Boolean                    @default(true) // Indicates if the movement type is active.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  // Relation
  stockMovements     MaterialStockMovement[] // Stock movements associated with this type.
  MaterialWithdrawal MaterialWithdrawal[]
  MaterialReceipt    MaterialReceipt[]

  @@map("material_stock_movement_types") // Maps this model to the 'stock_movement_types' table.
}

// Classifies the general operation of a StockMovementType.
enum MaterialStockOperationType {
  IN          @map("ENTRADA") // Represents an increase in stock (e.g., purchase, return).
  OUT         @map("SAIDA") // Represents a decrease in stock (e.g., usage, disposal).
  ADJUSTMENT  @map("AJUSTE") // Represents an adjustment that could be positive or negative (e.g., stock count).
  RESERVATION @map("RESERVA") // Represents a change in reserved/restricted quantity, not physical stock.
}

// Records individual material stock transactions (log of all movements).
model MaterialStockMovement {
  id Int @id @default(autoincrement()) // Unique identifier for the stock movement.

  warehouseId Int // Foreign key to the warehouse where the movement occurred.
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

  // The global material type involved, if applicable.
  globalMaterialId String?
  globalMaterial   MaterialGlobalCatalog? @relation("GlobalMaterialMovements", fields: [globalMaterialId], references: [id], onDelete: Restrict) // Relation to the Material model.

  // The specific material instance involved, if applicable.
  materialInstanceId Int?
  materialInstance   MaterialDerived? @relation("InstanceStockMovements", fields: [materialInstanceId], references: [id], onDelete: Restrict) // Relation to the MaterialInstance model.

  movementTypeId Int // Foreign key to the type of stock movement.
  movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id]) // Relation to the StockMovementType model.

  quantity      Decimal  @db.Decimal(12, 3) // Quantity of material moved in the unit of the instance or global material.
  unitOfMeasure String // Unit of measure for the movement.
  movementDate  DateTime @default(now()) // The date and time of the movement.

  createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

  // Usuário do almoxarifado que processou a saída
  processedByUserId Int? // Renomeado de userId para clareza, ou pode ser o almoxarife logado
  processedByUser   User? @relation("StockMovementsProcessedBy", fields: [processedByUserId], references: [id], onDelete: SetNull)

  // Usuário que EFETIVAMENTE RETIROU o material
  collectedByUserId Int? // Pode ser diferente do solicitante ou do técnico da OS
  collectedByUser   User? @relation("StockMovementsCollectedBy", fields: [collectedByUserId], references: [id], onDelete: SetNull)

  warehouseMaterialStock   MaterialWarehouseStock? @relation(fields: [warehouseMaterialStockId], references: [id]) // Relation to WarehouseMaterialStock.
  warehouseMaterialStockId Int? // Foreign key to WarehouseMaterialStock.
  materialRequestItem      MaterialRequestItem?    @relation(fields: [materialRequestItemId], references: [id]) // Relation to MaterialRequestItem.
  materialRequestItemId    Int? // Foreign key to MaterialRequestItem.

  maintenanceRequestId Int? // Para vincular saídas de emergência diretamente à OS
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

  // Referências de origem da movimentação (apenas UMA delas será preenchida)
  materialWithdrawalItemId Int?                    @unique // Se originado por um item de uma retirada efetiva
  materialWithdrawalItem   MaterialWithdrawalItem? @relation(fields: [materialWithdrawalItemId], references: [id]) // onDelete:SetNull ou Cascade? Se o item da retirada for deletado, o movimento deve sumir? Melhor SetNull e tratar.

  materialReceiptItemId Int?                 @unique
  materialReceiptItem   MaterialReceiptItem? @relation(fields: [materialReceiptItemId], references: [id], onDelete: SetNull)

  stockTransferOrderItemId Int?                       @unique
  stockTransferOrderItem   MaterialTransferOrderItem? @relation(fields: [stockTransferOrderItemId], references: [id], onDelete: SetNull)

  @@index([globalMaterialId]) // Index for faster lookups by global material.
  @@index([materialInstanceId]) // Index for faster lookups by material instance.
  @@map("material_stock_movements") // Maps this model to the 'material_stock_movements' table.
}

// Defines the possible states or conditions of a derived/used material instance.
model MaterialDerivedCondition {
  id               Int               @id @default(autoincrement()) // Unique identifier for the material instance condition.
  code             String            @unique // Short code for the condition (e.g., "GOOD", "DAMAGED").
  name             String // User-friendly name of the condition.
  description      String?           @db.Text // Detailed description of the condition.
  isUsable         Boolean           @default(true) // Indicates if materials in this condition are generally usable.
  createdAt        DateTime          @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt        DateTime          @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
  materialsDerived MaterialDerived[] // Material instances with this condition.

  @@map("material_derived_conditions") // Maps this model to the 'material_instance_conditions' table.
}

// Represents a specific instance or batch of a material, especially derived or with a specific state.
model MaterialDerived {
  id                Int    @id @default(autoincrement()) // Unique identifier for the material instance.
  derivedIdentifier String @unique @default(uuid()) // Unique identifier for this specific instance/batch. @map("instanceIdentifier")

  // Optional link to the global material catalog.
  // Filled if this instance is a leftover/processed version of a known global item.
  // Null if it's a new item generated locally without a global counterpart.
  globalMaterialId String?
  globalMaterial   MaterialGlobalCatalog? @relation("GlobalMaterialLink", fields: [globalMaterialId], references: [id], onDelete: SetNull) // Relation to the Material model.

  // Specific description of the instance (especially if globalMaterialId is null).
  derivedName          String // Specific name of this derived instance/type (e.g., "Cut Steel Plate 30x50cm").
  derivedDescription   String? @db.Text // Detailed description of the derived material.
  derivedUnitOfMeasure String // Unit of measure for THIS instance (may differ from globalMaterial).

  warehouseId Int // Foreign key to the warehouse where this instance is stored.
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

  conditionId Int // Foreign key to the condition of this material instance.
  condition   MaterialDerivedCondition @relation(fields: [conditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

  quantity            Decimal @db.Decimal(12, 3) // Current quantity of this instance.
  locationInWarehouse String? // Specific location within the warehouse for this instance.

  sourceNotes String? @db.Text // Notes about the origin of this instance (e.g., "Leftover from WO-123").

  // Reserved/Restricted balance SPECIFIC to this instance.
  reservedQuantity   Decimal @default(0) @db.Decimal(12, 3) // Quantity reserved for specific demands.
  restrictedQuantity Decimal @default(0) @db.Decimal(12, 3) // Quantity restricted for specific, paid-for requests.

  // Relations
  stockMovements        MaterialStockMovement[] @relation("InstanceStockMovements") // Stock movements related to this instance.
  fulfilledRequestItems MaterialRequestItem[]   @relation("FulfilledByInstance") // Material request items fulfilled by this specific instance.

  createdAt                    DateTime                       @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
  updatedAt                    DateTime                       @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
  StockTransferOrderItem       MaterialTransferOrderItem[]
  MaterialWithdrawalItem       MaterialWithdrawalItem[]
  MaterialRestrictionOrderItem MaterialRestrictionOrderItem[]

  @@index([globalMaterialId]) // Index for faster lookups by global material.
  @@index([warehouseId]) // Index for faster lookups by warehouse.
  @@index([conditionId]) // Index for faster lookups by condition.
  @@index([derivedName]) // Index for searching by derived name.
  @@map("material_derived") // Maps this model to the 'material_instances' table.
}

// --- Material Picking Order (Cabeçalho da Ordem de Separação/Reserva de Material) ---
// Solicitação para o almoxarifado separar e/O reservar materiais para uma retirada futura.
model MaterialPickingOrder {
  id                 Int    @id @default(autoincrement())
  pickingOrderNumber String @unique @default(uuid()) // Protocolo da ordem de separação

  // Para qual MaterialRequest esta ordem de separação se destina
  materialRequestId Int
  materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id])

  // Almoxarifado que deve separar os materiais
  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  // Usuário que solicitou a separação (geralmente o técnico ou planejador)
  requestedByUserId Int
  requestedByUser   User     @relation("PickingOrdersRequestedBy", fields: [requestedByUserId], references: [id])
  requestedAt       DateTime @default(now())

  // Usuário que EFETIVAMENTE coletará o conjunto de materiais
  beCollectedByUserId Int?
  beCollectedByUser   User? @relation("PickingOrdersBeCollectedByUser", fields: [beCollectedByUserId], references: [id])

  // trabalhador que EFETIVAMENTE coletará o conjunto de materiais
  beCollectedByWorkerId Int?
  beCollectedByWorker   Worker? @relation("PickingOrdersBeCollectedByWorker", fields: [beCollectedByWorkerId], references: [id])

  // Data desejada para retirada (opcional)
  desiredPickupDate DateTime?

  status MaterialPickingOrderStatus @default(PENDING_PREPARATION)
  // PENDENTE_PREPARACAO, EM_PREPARACAO, PRONTO_PARA_RETIRADA, PARCIALMENTE_RETIRADO, TOTALMENTE_RETIRADO, CANCELADO

  notes String? @db.Text // Instruções para o almoxarifado

  items MaterialPickingOrderItem[] // Itens a serem separados/reservados

  // Relação com as retiradas efetivas que atenderam esta ordem de separação
  materialWithdrawals MaterialWithdrawal[]

  createdAt             DateTime             @default(now()) @db.Timestamp(0)
  updatedAt             DateTime             @updatedAt @db.Timestamp(0)
  MaterialRequestItem   MaterialRequestItem? @relation(fields: [materialRequestItemId], references: [id])
  materialRequestItemId Int?

  @@index([materialRequestId])
  @@index([warehouseId])
  @@index([requestedByUserId])
  @@index([status])
  @@map("material_picking_orders")
}

enum MaterialPickingOrderStatus {
  PENDING_PREPARATION @map("PENDENTE PREPARACAO") // Aguardando almoxarifado iniciar a separação/reserva
  IN_PREPARATION      @map("EM PREPARACAO") // Almoxarifado está separando/reservando os itens
  READY_FOR_PICKUP    @map("PRONTO PARA RETIRADA") // Pronto para retirada
  // Materiais separados/reservados, aguardando retirada
  PARTIALLY_WITHDRAWN @map("PARCIALMENTE RETIRADO") // Parte dos itens desta ordem já foi retirada
  FULLY_WITHDRAWN     @map("TOTALMENTE RETIRADO") // Todos os itens desta ordem foram retirados
  CANCELLED           @map("CANCELADO") // Ordem de separação cancelada
  EXPIRED             @map("VENCIDA") // Ordem de separação vencida
}

// --- Material Picking Order Item (Detalhe da Ordem de Separação/Reserva) ---
// Cada material e quantidade a ser separado/reservado.
model MaterialPickingOrderItem {
  id Int @id @default(autoincrement())

  materialPickingOrderId Int
  materialPickingOrder   MaterialPickingOrder @relation(fields: [materialPickingOrderId], references: [id], onDelete: Cascade)

  // Referência ao item da Requisição de Material original
  materialRequestItemId Int
  materialRequestItem   MaterialRequestItem @relation(fields: [materialRequestItemId], references: [id])

  // O material específico a ser separado (redundante se já está no materialRequestItem, mas útil para resumo)
  // globalMaterialId     Int?
  // globalMaterial       Material? @relation(fields: [globalMaterialId], references: [id])
  // materialInstanceId   Int?
  // materialInstance     MaterialInstance? @relation(fields: [materialInstanceId], references: [id])

  quantityToPick Decimal @db.Decimal(10, 3) // Quantidade a ser separada/reservada para este item
  unitOfMeasure  String // Unidade de medida

  // Informações preenchidas pelo almoxarifado durante a preparação
  quantityPicked Decimal? @db.Decimal(10, 3) // Quantidade efetivamente separada/reservada
  // pickedFromInstanceId Int? // Se uma instância específica foi alocada durante o picking
  // pickedFromInstance   MaterialInstance? @relation(fields: [pickedFromInstanceId], references: [id])
  // notes                String? // Notas específicas do almoxarife sobre este item do picking

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([materialPickingOrderId])
  @@index([materialRequestItemId])
  @@map("material_picking_order_items")
}

// --- Material Withdrawal (Cabeçalho da Retirada Efetiva de Materiais) ---
// Representa um único evento de retirada física de um conjunto de materiais.
model MaterialWithdrawal {
  id               Int    @id @default(autoincrement())
  withdrawalNumber String @unique @default(uuid()) // Protocolo da retirada

  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  // Usuário do almoxarifado que processou a saída no sistema
  processedByUserId Int
  processedByUser   User @relation("WithdrawalsProcessedBy", fields: [processedByUserId], references: [id])

  // Usuário que EFETIVAMENTE RETIROU o conjunto de materiais
  collectedByUserId Int?
  collectedByUser   User? @relation("WithdrawalsCollectedByUser", fields: [collectedByUserId], references: [id])

  // Trabalhador que EFETIVAMENTE RETIROU o conjunto de materiais
  collectedByWorkerId Int?
  collectedByWorker   Worker? @relation("WithdrawalsCollectedByWorker", fields: [collectedByWorkerId], references: [id])

  withdrawalDate DateTime @default(now()) // Data e hora da retirada

  // Referência à demanda principal que motivou esta retirada
  maintenanceRequestId Int?
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

  materialRequestId Int? // A MaterialRequest GERAL que está sendo atendida
  materialRequest   MaterialRequest? @relation(fields: [materialRequestId], references: [id], onDelete: SetNull)

  // Se esta retirada foi originada por uma Ordem de Separação/Reserva específica
  materialPickingOrderId Int?
  materialPickingOrder   MaterialPickingOrder? @relation(fields: [materialPickingOrderId], references: [id], onDelete: SetNull)

  // Tipo geral da movimentação para este "pacote" (ex: SAIDA_USO_OS, SAIDA_EMERGENCIA)
  movementTypeId Int
  movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id])

  notes String? @db.Text

  items MaterialWithdrawalItem[] // Os materiais que compõem esta retirada

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([warehouseId])
  @@index([processedByUserId])
  @@index([collectedByUserId])
  @@index([withdrawalDate])
  @@index([maintenanceRequestId])
  @@index([materialRequestId])
  @@index([materialPickingOrderId])
  @@index([movementTypeId])
  @@map("material_withdrawals")
}

// --- Material Withdrawal Item (Detalhe da Retirada Efetiva) ---
// Cada material e quantidade que compôs uma MaterialWithdrawal.
model MaterialWithdrawalItem {
  id Int @id @default(autoincrement())

  materialWithdrawalId Int
  materialWithdrawal   MaterialWithdrawal @relation(fields: [materialWithdrawalId], references: [id], onDelete: Cascade)

  // O material específico que foi retirado
  globalMaterialId   String?
  globalMaterial     MaterialGlobalCatalog? @relation(fields: [globalMaterialId], references: [id], onDelete: Restrict)
  materialInstanceId Int?
  materialInstance   MaterialDerived?       @relation(fields: [materialInstanceId], references: [id], onDelete: Restrict)

  quantityWithdrawn Decimal @db.Decimal(12, 3)
  unitOfMeasure     String

  // Se este item está atendendo um MaterialRequestItem específico
  // Este link é crucial para atualizar o status da demanda original.
  materialRequestItemId Int?
  materialRequestItem   MaterialRequestItem? @relation("WithdrawalForRequestItem", fields: [materialRequestItemId], references: [id], onDelete: SetNull)

  // O MaterialStockMovement é gerado por este MaterialWithdrawalItem.
  // Cada MaterialWithdrawalItem RESULTA em UM MaterialStockMovement de SAÍDA.
  stockMovement MaterialStockMovement?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([materialWithdrawalId])
  @@index([globalMaterialId])
  @@index([materialInstanceId])
  @@index([materialRequestItemId])
  @@map("material_withdrawal_items")
}

// --- Stock Transfer Order (Cabeçalho da Ordem de Transferência) ---
model MaterialTransferOrder {
  id                  Int    @id @default(autoincrement())
  transferOrderNumber String @unique @default(uuid()) // Protocolo da transferência

  originWarehouseId Int
  originWarehouse   Warehouse @relation("TransfersFromWarehouse", fields: [originWarehouseId], references: [id])

  destinationWarehouseId Int
  destinationWarehouse   Warehouse @relation("TransfersToWarehouse", fields: [destinationWarehouseId], references: [id])

  status MaterialTransferStatus @default(PENDING_APPROVAL) // PENDENTE_APROVACAO, APROVADA, EM_TRANSITO, RECEBIDA_PARCIAL, RECEBIDA_TOTAL, CANCELADA

  requestedByUserId Int
  requestedByUser   User     @relation("TransferOrdersRequestedBy", fields: [requestedByUserId], references: [id])
  requestedAt       DateTime @default(now())

  // Quem aprovou a transferência (pode ser gerente do almox. origem ou um centralizador)
  approvedByUserId Int?
  approvedByUser   User?     @relation("TransferOrdersApprovedBy", fields: [approvedByUserId], references: [id])
  approvedAt       DateTime?

  // Quem despachou do almoxarifado de origem
  shippedByUserId Int?
  shippedByUser   User?     @relation("TransferOrdersShippedBy", fields: [shippedByUserId], references: [id])
  shippedAt       DateTime?

  // Quem recebeu no almoxarifado de destino
  receivedByUserId Int?
  receivedByUser   User?     @relation("TransferOrdersReceivedBy", fields: [receivedByUserId], references: [id])
  receivedAt       DateTime? // Data do último recebimento

  notes String? @db.Text
  // Pode estar vinculada a uma MaterialRequest original que disparou a necessidade de transferência
  // sourceMaterialRequestId Int?
  // sourceMaterialRequest   MaterialRequest? @relation(fields: [sourceMaterialRequestId], references: [id])

  items MaterialTransferOrderItem[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([originWarehouseId])
  @@index([destinationWarehouseId])
  @@index([status])
  @@map("material_transfer_orders")
}

enum MaterialTransferStatus {
  PENDING_APPROVAL   @map("PENDENTE APROVACAO") // Aguardando aprovação para a transferência
  APPROVED           @map("APROVADA") // Aprovada, aguardando despacho do almoxarifado de origem
  REJECTED           @map("REJEITADA") // Transferência Rejeitada
  PENDING_SHIPMENT   @map("PENDENTE DESPACHO") // Aprovada, aguardando o almoxarifado de origem separar e despachar
  IN_TRANSIT         @map("EM TRANSITO") // Materiais despachados, aguardando recebimento no destino
  PARTIALLY_RECEIVED @map("PARCIALMENTE RECEBIDA") // Parte dos materiais recebida no destino
  FULLY_RECEIVED     @map("TOTALMENTE RECEBIDA") // Todos os materiais recebidos no destino
  CANCELLED          @map("CANCELADA") // Transferência cancelada
}

// --- Stock Transfer Order Item (Itens da Ordem de Transferência) ---
model MaterialTransferOrderItem {
  id Int @id @default(autoincrement())

  materialTransferOrderId Int
  materialTransferOrder   MaterialTransferOrder @relation(fields: [materialTransferOrderId], references: [id], onDelete: Cascade)

  // O que está sendo transferido:
  // Pode ser um material NOVO do catálogo global
  materialId String?
  material   MaterialGlobalCatalog? @relation(fields: [materialId], references: [id])

  // OU uma INSTÂNCIA ESPECÍFICA de material
  materialInstanceId Int?
  materialInstance   MaterialDerived? @relation(fields: [materialInstanceId], references: [id])
  // Validação: Ou materialId ou materialInstanceId deve ser preenchido

  quantityRequested Decimal @db.Decimal(10, 3)
  unitOfMeasure     String // Unidade da solicitação/transferência

  // Preenchido pelo almoxarifado de ORIGEM
  quantityShipped Decimal? @db.Decimal(10, 3) // Quantidade efetivamente despachada

  // Preenchido pelo almoxarifado de DESTINO
  quantityReceived Decimal @default(0) @db.Decimal(10, 3) // Quantidade efetivamente recebida até o momento

  // Rastreamento de movimentações de estoque ligadas a este item de transferência
  // (uma de SAÍDA na origem, uma de ENTRADA no destino)
  stockMovements MaterialStockMovement[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@map("material_transfer_order_items")
}

// --- Material Receipt (Registro de Recebimento de Materiais Externos) ---
model MaterialReceipt {
  id                Int      @id @default(autoincrement())
  receiptNumber     String   @unique @default(uuid()) // Protocolo interno do recebimento
  externalReference String? // Número da Nota Fiscal, documento de doação, etc.
  receiptDate       DateTime @default(now())

  movementTypeId Int // Foreign key to the type of stock movement for this receipt.
  movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id])

  sourceName String? // Nome do Fornecedor, Doador, ou outra descrição da origem

  destinationWarehouseId Int
  destinationWarehouse   Warehouse @relation("ReceiptsAtWarehouse", fields: [destinationWarehouseId], references: [id])

  processedByUserId Int // Usuário que processou o recebimento
  processedByUser   User @relation("ReceiptsProcessedBy", fields: [processedByUserId], references: [id])

  status MaterialReceiptStatus @default(PENDING_INSPECTION)

  notes String? @db.Text

  items MaterialReceiptItem[] // Itens recebidos

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([destinationWarehouseId])
  @@index([receiptDate])
  @@index([movementTypeId]) // Updated index to use movementTypeId
  @@map("material_receipts") // Novo nome da tabela
}

enum MaterialReceiptStatus {
  PENDING_INSPECTION @map("PENDENTE INSPEÇÃO")
  PARTIALLY_ACCEPTED @map("PARCIALMENTE ACEITO")
  FULLY_ACCEPTED     @map("TOTALMENTE ACEITO")
  REJECTED_TOTAL     @map("TOTALMENTE REJEITADO")
  CANCELLED          @map("CANCELADO")
}

// --- Material Receipt Item (Itens do Recebimento de Material) ---
model MaterialReceiptItem {
  id Int @id @default(autoincrement())

  materialReceiptId Int
  materialReceipt   MaterialReceipt @relation(fields: [materialReceiptId], references: [id], onDelete: Cascade)

  materialId String
  material   MaterialGlobalCatalog @relation(fields: [materialId], references: [id])

  quantityExpected Decimal @db.Decimal(10, 3)
  unitOfMeasure    String

  quantityReceived Decimal? @db.Decimal(10, 3)
  quantityAccepted Decimal? @db.Decimal(10, 3)
  quantityRejected Decimal? @db.Decimal(10, 3)
  rejectionReason  String?  @db.Text

  batchNumber    String?
  expirationDate DateTime?
  unitPrice      Decimal?  @db.Decimal(12, 4)

  materialStockMovement MaterialStockMovement?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@map("material_receipt_items") // Novo nome da tabela
}

// --- Material Restriction Order (Cabeçalho) ---
model MaterialRestrictionOrder {
  id                     Int    @id @default(autoincrement())
  restrictionOrderNumber String @unique @default(uuid())

  warehouseId Int
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  operationType RestrictionOperationType // RESTRICT, RELEASE_RESTRICTION

  processedByUserId Int
  processedByUser   User     @relation("RestrictionOrdersProcessedBy", fields: [processedByUserId], references: [id])
  processedAt       DateTime @default(now())

  // Se a ordem de restrição como um todo está relacionada a UMA MaterialRequest específica
  // (Isso é útil se todos os itens da restrição são para a mesma MaterialRequest)
  targetMaterialRequestId Int?
  targetMaterialRequest   MaterialRequest? @relation("RestrictionsForMaterialRequest", fields: [targetMaterialRequestId], references: [id], onDelete: SetNull)

  status RestrictionOrderStatus @default(PENDING)
  notes  String?                @db.Text

  items MaterialRestrictionOrderItem[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([targetMaterialRequestId]) // Novo índice
  @@map("material_restriction_orders")
}

enum RestrictionOperationType {
  RESTRICT            @map("RESTRINGIR") // Marcar materiais como restritos
  RELEASE_RESTRICTION @map("LIBERAR") // Liberar materiais que estavam restritos
}

enum RestrictionOrderStatus {
  PENDING            @map("PENDENTE") // Ordem criada, aguardando efetivação da restrição/liberação no estoque
  EFFECTIVE          @map("EFETIVA") // Restrição/liberação aplicada ao estoque
  PARTIALLY_REVERSED @map("PARCIALMENTE REVERSADA") // Se uma restrição foi parcialmente liberada por uma ordem subsequente
  FULLY_REVERSED     @map("TOTALMENTE REVERSADA") // Se uma restrição foi totalmente liberada por uma ordem subsequente
  CANCELLED          @map("CANCELADA") // Ordem cancelada antes da efetivação
}

// --- Material Restriction Order Item (Detalhe da Ordem de Restrição/Liberação) ---
model MaterialRestrictionOrderItem {
  id Int @id @default(autoincrement())

  materialRestrictionOrderId Int
  materialRestrictionOrder   MaterialRestrictionOrder @relation(fields: [materialRestrictionOrderId], references: [id], onDelete: Cascade)

  // O material específico a ser restringido/liberado
  globalMaterialId   String?
  globalMaterial     MaterialGlobalCatalog? @relation(fields: [globalMaterialId], references: [id], onDelete: Restrict)
  materialInstanceId Int?
  materialInstance   MaterialDerived?       @relation(fields: [materialInstanceId], references: [id], onDelete: Restrict)

  quantity      Decimal @db.Decimal(12, 3)
  unitOfMeasure String

  // *** RELAÇÃO CRUCIAL ADICIONADA/REFORÇADA ***
  // Para qual MaterialRequestItem esta restrição/liberação específica se aplica.
  // Isso é essencial se a restrição é porque o material foi "comprado para" ou "alocado para" este item de demanda.
  targetMaterialRequestItemId Int? // Tornar opcional se uma restrição puder existir sem um item de requisição direto (ex: reserva estratégica)
  targetMaterialRequestItem   MaterialRequestItem? @relation("RestrictionsForRequestItem", fields: [targetMaterialRequestItemId], references: [id], onDelete: SetNull)

  // stockMovementId          Int?     @unique
  // stockMovement            MaterialStockMovement? @relation(fields: [stockMovementId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([targetMaterialRequestItemId]) // Novo índice
  @@map("material_restriction_order_items")
}

// Defines the Prisma client generator.
generator client {
  provider = "prisma-client-js" // Specifies the Prisma client provider (JavaScript/TypeScript).
  output   = "../generated/client" // The output directory for the generated Prisma client.
}

// Defines the database connection.
datasource db {
  provider = "mysql" // Specifies the database provider (MySQL in this case).
  url      = env("DB_URL") // The connection URL to the database, loaded from environment variables.
}

// This file is reserved for Prisma models related to SIPAC (Sistema Integrado de Patrimônio, Administração e Contratos) integration.
// Models defined here will handle data structures specific to SIPAC, if and when integration is implemented.

// Represents material data from SIPAC.
model SipacMaterial {
  idMaterial               Int      @id // Identificador do material.
  ativo                    Boolean // Indica se o material está ativo.
  codigo                   String   @unique // Código do material.
  codigoSidec              String? // Código do material no sistema do governo SIDEC.
  consumoEnergia           Decimal? @db.Decimal(12, 4) // Consumo de energia.
  // dataUltimaCompra         DateTime @db.Timestamp(0) // Data da última compra do material (timestamp).
  denominacaoGrupo         String? // Denominação do grupo do material.
  denominacaoMaterial      String   @db.VarChar(255) // Denominação do material.
  denominacaoMaterialAscii String?  @db.VarChar(255) // Denominação do material em ASCII.
  denominacaoSubGrupo      String? // Denominação do sub-grupo do material.
  denominacaoUnidade       String? // Denominação da unidade do material.
  especificacao            String?  @db.Text // Especificação do material.
  especificacaoAscii       String?  @db.Text // Especificação do material em ASCII.
  idGrupo                  Int? // Identificador do grupo do material.
  idSubGrupo               Int? // Identificador do sub-grupo do material.
  precoCompra              Decimal? @db.Decimal(12, 4) // Preço de compra do material.
  valorEstimado            Decimal? @db.Decimal(12, 4) // Valor estimado do material.

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  //Relations
  grupo               SipacGrupoMaterial?           @relation(fields: [idGrupo], references: [idGrupoMaterial])
  subGrupo            SipacSubGrupoMaterial?        @relation(fields: [idSubGrupo], references: [idSubGrupoMaterial])
  requisicoesMaterial SipacItemRequisicaoMaterial[]

  @@index([codigo])
  @@index([idGrupo])
  @@map("sipac_materiais")
}

// Representa um grupo de material do sistema.
model SipacGrupoMaterial {
  idGrupoMaterial   Int     @id // Identificador do grupo.
  ativo             Boolean // Indica se um grupo material está ativo ou não.
  codigo            String  @unique // Código do grupo.
  denominacao       String // Nome do grupo.
  descricao         String? // Descrição detalhada do grupo de material.
  idElementoDespesa Int? // Identificador do elemento de despesa associado ao grupo de material.

  createdAt                DateTime                  @default(now()) @db.Timestamp(0)
  updatedAt                DateTime                  @updatedAt @db.Timestamp(0)
  sipacMateriais           SipacMaterial[]
  subGrupos                SipacSubGrupoMaterial[]
  sipacRequisicoesMaterial SipacRequisicaoMaterial[]

  @@index([codigo])
  @@map("sipac_grupos_materiais")
}

// Representa um sub-grupo de material do sistema.
model SipacSubGrupoMaterial {
  idSubGrupoMaterial Int    @id // Identificador do subgrupo.
  codigo             BigInt @unique // Código identificador do subgrupo. Junção do código do grupo mais um sequencial.
  denominacao        String // Descrição resumida do subgrupo.
  idGrupoMaterial    Int // Identificador do grupo.

  createdAt          DateTime            @default(now()) @db.Timestamp(0)
  updatedAt          DateTime            @updatedAt @db.Timestamp(0)
  sipacMateriais     SipacMaterial[]
  SipacGrupoMaterial SipacGrupoMaterial? @relation(fields: [idGrupoMaterial], references: [idGrupoMaterial])

  @@index([codigo])
  @@index([idGrupoMaterial])
  @@map("sipac_sub_grupos_materiais")
}

// Representa os dados de uma requisição de material do SIPAC.
model SipacRequisicaoMaterial {
  id                            Int       @id // Identificador único da requisição.
  numeroDaRequisicao            String    @unique // Número da requisição no SIPAC (ex: "10990/2025").
  tipoDaRequisicao              String? // Tipo da requisição (ex: "REQUISIÇÃO DE MATERIAL").
  tipoId                        Int? // Identificador do tipo de requisição.
  convenio                      String? // Indica se há convênio (ex: "Não").
  grupoDeMaterial               String? // Grupo de material (ex: "(0)").
  grupoMaterialId               Int? // Identificador do grupo de material.
  siglaUnidadeDeCusto           String // Unidade de custo (ex: "INSTITUTO METROPOLE DIGITAL (11.00.05)").
  siglaUnidadeRequisitante      String // Unidade requisitante (ex: "DIRETORIA DE MANUTENÇÃO DE INSTALAÇÕES FÍSICAS (11.08.05)").
  destinoDaRequisicao           String? // Destino da requisição (ex: "SUSTENTAÇÃO DE ESTOQUE DO ALMOXARIFADO DA SUP. INFRAESTRUTURA (11.89)").
  usuarioLogin                  String // Usuário que cadastrou a requisição (ex: "edivan.nascimento - EDIVAN DO NASCIMENTO (Ramal: )").
  usuarioId                     Int? // Identificador do usuário que cadastrou a requisição.
  dataDeCadastro                DateTime  @db.Timestamp(0) // Data de cadastro da requisição.
  dataDeEnvio                   DateTime? @db.Timestamp(0) // Data de envio da requisição.
  valorDaRequisicao             Decimal   @db.Decimal(12, 2) // Valor total da requisição.
  valorDoTotalAtendido          Decimal?  @db.Decimal(12, 2) // Valor total atendido da requisição.
  opcaoOrcamentaria             String? // Opção orçamentária (ex: "SOLICITAR AUTORIZAÇÃO ORÇAMENTÁRIA").
  numeroDaRequisicaoRelacionada String? // Número da requisição relacionada (ex: "1164/ 2025 (REQUISIÇÃO DE MANUTENÇÃO)").
  local                         String? // Local da requisição (ex: "INSTITUTO METROPOLE DIGITAL - CIVT").
  observacoes                   String?   @db.Text // Observações gerais da requisição.
  statusAtual                   String // Status atual da requisição (ex: "FINALIZADA").
  almoxarifado                  String // Identificação do almoxarifado
  almoxarifadoId                Int?

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  // Relations
  itensDaRequisicao                          SipacItemRequisicaoMaterial[]
  historicoDaRequisicao                      SipacHistoricoRequisicaoMaterial[]
  totalizacaoPorElementoDeDespesasDetalhados SipacTotalizacaoElementoDespesaMaterial[]
  detalhesDaAquisicao                        SipacDetalheAquisicaoItemMaterial[]
  grupoMaterial                              SipacGrupoMaterial?                       @relation(fields: [grupoMaterialId], references: [idGrupoMaterial])

  // Relation to SipacRequisicaoManutencao
  sipacRequisicaoManutencaoId Int?
  sipacRequisicaoManutencao   SipacRequisicaoManutencao? @relation(fields: [sipacRequisicaoManutencaoId], references: [id], onDelete: SetNull)

  //unidades
  unidadeRequisitanteId Int?
  unidadeRequisitante   SipacUnidade? @relation("unidadeRequisitanteMaterial", fields: [unidadeRequisitanteId], references: [id])
  unidadeCustoId        Int?
  unidadeCusto          SipacUnidade? @relation("unidadeCustoMaterial", fields: [unidadeCustoId], references: [id])

  @@index([numeroDaRequisicao])
  @@index([sipacRequisicaoManutencaoId])
  @@map("sipac_requisicoes_materiais")
}

// Representa um item de uma requisição de material do SIPAC.
model SipacItemRequisicaoMaterial {
  id                  Int      @id @default(autoincrement()) // Identificador único do item.
  numeroItem          Int // Número sequencial do item na requisição.
  codigo              String // Código do material.
  quantidade          Int // Quantidade solicitada.
  valor               Decimal  @db.Decimal(12, 2) // Valor unitário do item.
  total               Decimal  @db.Decimal(12, 2) // Valor total do item (quantidade * valor).
  quantidadeAtendida  Int // Quantidade atendida do item.
  quantidadeDevolvida Int // Quantidade devolvida do item.
  quantidadeEmCompra  Int // Quantidade em processo de compra.
  valorAtendimento    Decimal? @db.Decimal(12, 2) // Valor unitário do atendimento.
  totalAtendimento    Decimal? @db.Decimal(12, 2) // Valor total do atendimento.
  status              String // Status do item (ex: "ATENDIDO").

  requisicaoId Int? // Chave estrangeira para SipacRequisicaoMaterial.
  requisicao   SipacRequisicaoMaterial? @relation(fields: [requisicaoId], references: [id], onDelete: Cascade)

  material SipacMaterial @relation(fields: [codigo], references: [codigo])

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([requisicaoId])
  @@map("sipac_itens_requisicao_material")
}

// Representa uma entrada no histórico de uma requisição de material do SIPAC.
model SipacHistoricoRequisicaoMaterial {
  id          Int      @id @default(autoincrement()) // Identificador único da entrada de histórico.
  dataHora    DateTime @db.Timestamp(0) // Data e hora do evento.
  status      String // Status atribuído no evento (ex: "CADASTRADA", "AUTORIZADA").
  usuario     String // Usuário responsável pelo evento.
  observacoes String?  @db.Text // Observações do evento.

  requisicaoId Int // Chave estrangeira para SipacRequisicaoMaterial.
  requisicao   SipacRequisicaoMaterial @relation(fields: [requisicaoId], references: [id], onDelete: Cascade)

  @@index([requisicaoId])
  @@map("sipac_historico_requisicao_material")
}

// Representa a totalização por elemento de despesa de uma requisição de material.
model SipacTotalizacaoElementoDespesaMaterial {
  id              Int     @id @default(autoincrement()) // Identificador único.
  grupoDeMaterial String // Descrição do grupo de material e elemento de despesa.
  total           Decimal @db.Decimal(12, 2) // Valor total para o grupo.

  requisicaoId Int? // Chave estrangeira para SipacRequisicaoMaterial.
  requisicao   SipacRequisicaoMaterial? @relation(fields: [requisicaoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([requisicaoId])
  @@map("sipac_totalizacao_elemento_despesa_material")
}

// Representa os detalhes da aquisição dos itens de uma requisição.
model SipacDetalheAquisicaoItemMaterial {
  id                   Int     @id @default(autoincrement()) // Identificador único.
  compras              String? // Informações sobre processos de compra.
  empenhos             String? // Informações sobre empenhos.
  notasFiscais         String? // Informações sobre notas fiscais.
  processosDePagamento String? // Informações sobre processos de pagamento.

  requisicaoId Int // Chave estrangeira para SipacRequisicaoMaterial.
  requisicao   SipacRequisicaoMaterial @relation(fields: [requisicaoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([requisicaoId])
  @@map("sipac_detalhe_aquisicao_item_material")
}

// Representa uma requisição de manutenção do SIPAC.
model SipacRequisicaoManutencao {
  id                             Int       @id // Identificador único da requisição de manutenção.
  numeroRequisicao               String    @unique // Número da requisição (ex: "2124/2025").
  categoriaRequisicao            String? // Categoria da requisição (ex: "Manutenção Corretiva"; "Manutenção Preventiva"; "Meio Ambiente").
  idCategoria                    Int?
  tipoDaRequisicao               String? // Tipo da requisição (ex: "REQUISIÇÃO DE MANUTENÇÃO").
  idTipo                         Int? // Identificador do tipo da requisição.
  divisao                        String? // Divisão (ex: "Serviços Gerais").
  usuarioGravacao                String? // Usuário que gravou a requisição (ex: "JOAO PAULO FELIPE PINTO").
  idUsuarioGravacao              Int? // Identificador do usuário que gravou a requisição.
  status                         String // Status da requisição (ex: "PEDIDO DE MATERIAL REALIZADO").
  dataDeCadastro                 DateTime? @db.Timestamp(0) // Data de cadastro da requisição.
  nomeUnidadeRequisitante        String? // Unidade requisitante.
  nomeUnidadeDeCusto             String? // Unidade de custo.
  nomePredio                     String? // Nome do prédio.
  descricao                      String    @db.Text // Descrição da requisição.
  local                          String? // Local da requisição.
  representanteDaUnidadeDeOrigem String?
  telefonesDoRepresentante       String?
  ramal                          String?
  email                          String?
  horarioParaAtendimento         String?
  observacao                     String?   @db.Text

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  // Relations
  informacoesServico          SipacInformacaoServicoManutencao[]
  requisicaoManutencaoIdMae   Int?
  // Requisições de manutenção que esta requisição lista como associadas
  requisicaoManutencaoMae     SipacRequisicaoManutencao?         @relation("RequisicaoManutencaoAssociacao", fields: [requisicaoManutencaoIdMae], references: [id])
  // Requisições de manutenção que listam esta requisição como associada
  requisicoesManutencaoFilhas SipacRequisicaoManutencao[]        @relation("RequisicaoManutencaoAssociacao")
  requisicoesMateriais        SipacRequisicaoMaterial[] // Requisições de material vinculadas a esta requisição de manutenção
  predios                     SipacPredio[]
  historico                   SipacHistoricoManutencao[]

  //unidades
  unidadeRequisitanteId Int?
  unidadeRequisitante   SipacUnidade? @relation("unidadeRequisitanteManutencao", fields: [unidadeRequisitanteId], references: [id])
  unidadeCustoId        Int?
  unidadeCusto          SipacUnidade? @relation("unidadeCustoManutencao", fields: [unidadeCustoId], references: [id])

  @@index([numeroRequisicao])
  @@map("sipac_requisicoes_manutencao")
}

// Representa informações do serviço de uma requisição de manutenção.
model SipacInformacaoServicoManutencao {
  id                 Int      @id @default(autoincrement())
  diagnostico        String?
  executante         String?
  dataDeCadastro     DateTime @db.Timestamp(0)
  tecnicoResponsavel String?

  requisicaoManutencaoId Int
  requisicaoManutencao   SipacRequisicaoManutencao @relation(fields: [requisicaoManutencaoId], references: [id], onDelete: Cascade)

  @@index([requisicaoManutencaoId])
  @@map("sipac_informacoes_servico_manutencao")
}

// Representa o histórico de uma requisição de manutenção.
model SipacHistoricoManutencao {
  id          Int      @id @default(autoincrement())
  data        DateTime @db.Timestamp(0) // Data do evento no histórico.
  status      String // Status atribuído no evento.
  usuario     String // Usuário responsável pelo evento.
  ramal       String? // Ramal do usuário.
  observacoes String?  @db.Text // Observações do evento.

  requisicaoManutencaoId Int
  requisicaoManutencao   SipacRequisicaoManutencao @relation(fields: [requisicaoManutencaoId], references: [id], onDelete: Cascade)

  @@index([requisicaoManutencaoId])
  @@map("sipac_historico_manutencao")
}

// Representa um imóvel no sistema SIPAC.
model SipacImovel {
  rip        String   @id /// Corresponde ao registro do imóvel no SPIUnet, sistema do governo.
  nomeImovel String /// Nome do imóvel. Tive que retirar a restrição unique pois tem nome repetido
  latitude   Decimal? @db.Decimal(8, 6) /// Latitude do prédio.
  longitude  Decimal? @db.Decimal(9, 6) /// Longitude do prédio.

  tipoVocacao String?

  tipoFormaAquisicao String?

  tipoImovel String?

  // Relations
  predios  SipacPredio[]
  endereco SipacImovelEndereco?
  campus   SipacCampus?

  @@index([rip])
  @@map("sipac_imoveis")
}

model SipacImovelEndereco {
  id          Int     @id() @default(autoincrement())
  municipio   String /// Município ao qual o imóvel pertence. TODO: Relacionar com SipacMunicipio se existir.
  bairro      String? /// Bairro ao qual o imóvel pertence. TODO: Relacionar com SipacBairro se existir.
  logradouro  String? /// Logradouro ao qual o imóvel pertence. TODO: Relacionar com SipacLogradouro se existir.
  numero      String? /// Número do imóvel.
  complemento String? /// Complemento do imóvel.
  cep         String? /// CEP do imóvel.

  ripImovel String      @unique /// Identificador do imóvel associado ao endereço.
  imovel    SipacImovel @relation(fields: [ripImovel], references: [rip])

  @@index([ripImovel])
  @@map("sipac_imoveis_enderecos")
}

model SipacCampus {
  id         Int          @id @default(autoincrement())
  nomeCampus String       @unique
  ripImovel  String?      @unique /// Identificador do imóvel associado ao endereço.
  imovel     SipacImovel? @relation(fields: [ripImovel], references: [rip])

  @@index([ripImovel])
  @@index([nomeCampus])
  @@map("sipac_campus")
}

// Representa um prédio associado a um imóvel no sistema SIPAC.
model SipacPredio {
  subRip            String   @id /// Sub Rip do prédio
  denominacaoPredio String   @db.VarChar(500) /// Denominação do prédio
  idZona            String? /// Identificador da zona associada ao prédio. TODO: Relacionar com SipacZona se existir.
  ripImovel         String /// Identificador do imóvel associado ao prédio
  latitude          Decimal? @db.Decimal(8, 6) /// Latitude do prédio.
  longitude         Decimal? @db.Decimal(9, 6) /// Longitude do prédio.

  imovel SipacImovel @relation(fields: [ripImovel], references: [rip])

  requisicoesManutencao SipacRequisicaoManutencao[]

  @@index([ripImovel])
  @@map("sipac_predios")
}

// Representa uma unidade da instituição.
model SipacUnidade {
  id            Int     @id // Identificador da unidade.
  codigoUnidade String  @unique // Código da unidade.
  nomeUnidade   String // Nome da unidade.
  sigla         String? // Sigla da unidade.

  requisicoesManutencaoRequisistante SipacRequisicaoManutencao[] @relation("unidadeRequisitanteManutencao")
  requisicoesManutencaoCusto         SipacRequisicaoManutencao[] @relation("unidadeCustoManutencao")

  requisicoesMaterialRequisitante SipacRequisicaoMaterial[] @relation("unidadeRequisitanteMaterial")
  requisicoesMaterialCusto        SipacRequisicaoMaterial[] @relation("unidadeCustoMaterial")

  materialRequestRequisitante MaterialRequest[] @relation("unidadeRequisitanteMaterialRequest")
  materialRequestCusto        MaterialRequest[] @relation("unidadeCustoMaterialRequest")

  @@index([codigoUnidade])
  @@index([nomeUnidade])
  @@index([sigla])
  @@map("sipac_unidades")
}

// Defines the possible statuses for a MaterialRequest.
enum SipacRequisicaoManutencaoStatus {
  AGUARDANDO_AVALIACAO_REQUISITANTE
  AGUARDANDO_PEDIDO_MATERIAL
  AGUARDANDO_VISITA
  AUTORIZADA
  CADASTRADA
  EM_ROTA_VISITA
  EM_EXECUCAO
  ENVIADA
  ESTORNADA
  FINALIZADA
  MATERIAL_RECEBIDO
  NEGADA
  PEDIDO_MATERIAL_REALIZADO
  RETORNADA
  SERVICO_AVALIADO
  SERVICO_NAO_EXECUTADO
}

enum SipacRequisicaoManutencaoDivisoes {
  AR_CONDICIONADO
  INSTALACOES_ELETRICAS_E_TELECOMUNICACOES
  INSTALACOES_HIDRAULICAS_E_SANITARIAS
  OUTROS
  SERVICOS_GERAIS
  VIARIO
}

// Represents a user of the system.
model User {
  id         Int         @id @default(autoincrement()) // Unique identifier for the user.
  name       String      @db.VarChar(63) // The full name of the user.
  login      String      @unique @db.VarChar(63) // Unique login username for the user.
  email      String      @unique @db.VarChar(127) // Unique email address of the user.
  image      String      @default("") @db.VarChar(255) // URL to the user's profile image.
  isActive   Boolean     @default(true) // Indicates if the user account is active.
  createdAt  DateTime    @default(now()) @db.Timestamp(0) // Timestamp for when the user record was created.
  updatedAt  DateTime    @updatedAt @db.Timestamp(0) // Timestamp for the last update of the user record.
  roles      Role[] // Roles assigned to this user.
  magicLinks MagicLink[] // Magic links generated for this user.

  // Relations: log.prisma
  logLogin LogLogin[] // Related login logs for this user.

  // Relations: maintenance.prisma
  reportedOccurrences         InfrastructureOccurrence[] @relation("ReportedOccurrences") // Infrastructure occurrences reported by this user.
  createdMaintenanceRequests  MaintenanceRequest[]       @relation("CreatedByUser") // Maintenance requests created by this user.
  assignedMaintenanceRequests MaintenanceRequest[]       @relation("AssignedToUser") // Maintenance requests assigned to this user.
  timelineEvents              MaintenanceTimelineEvent[] @relation("ActionByUser") // Timeline events/actions performed by this user.

  // Relations: material.prisma (for MaterialRequest)
  materialRequestsCreated      MaterialRequest[]       @relation("MaterialRequestedByUser") // Material requests created by this user.
  materialRequestStatusUpdates MaterialRequestStatus[] @relation("MaterialRequestStatusChangedBy")

  // Relations: material.prisma (for MaterialWithdrawal)
  withdrawalsProcessed MaterialWithdrawal[] @relation("WithdrawalsProcessedBy") // Withdrawals processed by this user.
  withdrawalsCollected MaterialWithdrawal[] @relation("WithdrawalsCollectedByUser") // Withdrawals collected by this user.

  // Relations: material.prisma (for MaterialReceipt)
  receiptsProcessed MaterialReceipt[] @relation("ReceiptsProcessedBy") // Material receipts processed by this user.

  // Relations: material.prisma (for StockTransferOrder)
  transferOrdersRequested MaterialTransferOrder[] @relation("TransferOrdersRequestedBy") // Stock transfer orders requested by this user.
  transferOrdersApproved  MaterialTransferOrder[] @relation("TransferOrdersApprovedBy") // Stock transfer orders approved by this user.
  transferOrdersShipped   MaterialTransferOrder[] @relation("TransferOrdersShippedBy") // Stock transfer orders shipped by this user.
  transferOrdersReceived  MaterialTransferOrder[] @relation("TransferOrdersReceivedBy") // Stock transfer orders received by this user.

  // Relations: material.prisma (for MaterialPickingOrder)
  pickingOrdersRequested   MaterialPickingOrder[] @relation("PickingOrdersRequestedBy") // Material picking orders requested by this user.
  pickingOrdersBeCollected MaterialPickingOrder[] @relation("PickingOrdersBeCollectedByUser") // Material picking orders to be collected by this user.

  // Relations: material.prisma (for MaterialRestrictionOrder)
  restrictionOrdersProcessed      MaterialRestrictionOrder[] @relation("RestrictionOrdersProcessedBy") // Material restriction orders processed by this user.
  materialStockMovementsProcessed MaterialStockMovement[]    @relation("StockMovementsProcessedBy")
  materialStockMovementsCollected MaterialStockMovement[]    @relation("StockMovementsCollectedBy")

  @@map("users") // Maps this model to the 'users' table.
}

// Represents a magic link used for passwordless authentication or account verification.
model MagicLink {
  id        String    @id @default(cuid()) // Unique identifier for the magic link.
  code      String    @unique // The unique code embedded in the magic link URL.
  userId    Int // Foreign key to the user associated with this magic link.
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to the User model.
  expiresAt DateTime  @db.Timestamp(0) // The expiration date and time of the magic link.
  usedAt    DateTime? // Timestamp for when the magic link was used.
  createdAt DateTime  @default(now()) @db.Timestamp(0) // Timestamp for when the magic link was created.

  @@index([userId, code]) // Index for faster lookups by user ID and code.
  @@map("magic_links") // Maps this model to the 'magic_links' table.
}

// Defines user roles within the system, controlling access and permissions.
model Role {
  id          Int      @id // Unique identifier for the role.
  role        String   @db.VarChar(255) // The name of the role (e.g., "Administrator", "Technician").
  description String   @db.Text // A detailed description of the role's permissions.
  createdAt   DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the role record was created.
  updatedAt   DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the role record.
  users       User[] // Users assigned to this role.

  @@map("roles") // Maps this model to the 'roles' table.
}

model Worker {
  id Int @id @default(autoincrement())

  // Relations: material.prisma (for MaterialPickingOrder)
  pickingOrdersBeCollected MaterialPickingOrder[] @relation("PickingOrdersBeCollectedByWorker") // Material picking orders to be collected by this worker.

  // Relations: material.prisma (for MaterialWithdrawal)
  withdrawalsCollected MaterialWithdrawal[] @relation("WithdrawalsCollectedByWorker") // Material picking orders to be collected by this worker.

  @@map("workers")
}
