
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.LogErrorScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  statusCode: 'statusCode',
  path: 'path',
  method: 'method',
  message: 'message',
  stackTrace: 'stackTrace',
  ipAddress: 'ipAddress',
  userId: 'userId',
  requestBody: 'requestBody'
};

exports.Prisma.LogLoginScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  successful: 'successful'
};

exports.Prisma.MaintenanceRequestScalarFieldEnum = {
  id: 'id',
  protocolNumber: 'protocolNumber',
  title: 'title',
  description: 'description',
  priority: 'priority',
  requestedAt: 'requestedAt',
  deadline: 'deadline',
  solutionDetails: 'solutionDetails',
  completedAt: 'completedAt',
  currentMaintenanceInstanceId: 'currentMaintenanceInstanceId',
  createdById: 'createdById',
  assignedToId: 'assignedToId',
  equipmentId: 'equipmentId',
  serviceTypeId: 'serviceTypeId',
  statusId: 'statusId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceRequestStatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isFinal: 'isFinal',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceTimelineEventScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  eventData: 'eventData',
  occurredAt: 'occurredAt',
  maintenanceRequestId: 'maintenanceRequestId',
  actionById: 'actionById',
  transferredFromInstanceId: 'transferredFromInstanceId',
  transferredToInstanceId: 'transferredToInstanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceInstanceScalarFieldEnum = {
  id: 'id',
  sipacId: 'sipacId',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  patrimonyTag: 'patrimonyTag',
  name: 'name',
  description: 'description',
  location: 'location',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  acquisitionDate: 'acquisitionDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InfrastructureOccurrenceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  locationDescription: 'locationDescription',
  reportedAt: 'reportedAt',
  status: 'status',
  resolutionNotes: 'resolutionNotes',
  reportedById: 'reportedById',
  maintenanceRequestId: 'maintenanceRequestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  unitOfMeasure: 'unitOfMeasure',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentMaterialId: 'parentMaterialId'
};

exports.Prisma.MaterialRequestScalarFieldEnum = {
  id: 'id',
  justification: 'justification',
  requestDate: 'requestDate',
  status: 'status',
  maintenanceRequestId: 'maintenanceRequestId',
  requestedById: 'requestedById',
  approvedById: 'approvedById',
  approvalDate: 'approvalDate',
  approvalNotes: 'approvalNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaterialRequestItemScalarFieldEnum = {
  id: 'id',
  quantityRequested: 'quantityRequested',
  quantityApproved: 'quantityApproved',
  quantityDelivered: 'quantityDelivered',
  materialRequestId: 'materialRequestId',
  materialId: 'materialId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  login: 'login',
  email: 'email',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MagicLinkScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  role: 'role',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.LogErrorOrderByRelevanceFieldEnum = {
  id: 'id',
  path: 'path',
  method: 'method',
  message: 'message',
  stackTrace: 'stackTrace',
  ipAddress: 'ipAddress',
  requestBody: 'requestBody'
};

exports.Prisma.LogLoginOrderByRelevanceFieldEnum = {
  id: 'id',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.MaintenanceRequestOrderByRelevanceFieldEnum = {
  protocolNumber: 'protocolNumber',
  title: 'title',
  description: 'description',
  solutionDetails: 'solutionDetails'
};

exports.Prisma.MaintenanceRequestStatusOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.MaintenanceTimelineEventOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.MaintenanceInstanceOrderByRelevanceFieldEnum = {
  sipacId: 'sipacId',
  name: 'name'
};

exports.Prisma.ServiceTypeOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.EquipmentOrderByRelevanceFieldEnum = {
  patrimonyTag: 'patrimonyTag',
  name: 'name',
  description: 'description',
  location: 'location',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model'
};

exports.Prisma.InfrastructureOccurrenceOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  locationDescription: 'locationDescription',
  resolutionNotes: 'resolutionNotes'
};

exports.Prisma.MaterialOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  unitOfMeasure: 'unitOfMeasure'
};

exports.Prisma.MaterialRequestOrderByRelevanceFieldEnum = {
  justification: 'justification',
  approvalNotes: 'approvalNotes'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  name: 'name',
  login: 'login',
  email: 'email',
  image: 'image'
};

exports.Prisma.MagicLinkOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  role: 'role',
  description: 'description'
};
exports.RequestPriority = exports.$Enums.RequestPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TimelineEventType = exports.$Enums.TimelineEventType = {
  CREATION: 'CREATION',
  COMMENT: 'COMMENT',
  STATUS_CHANGE: 'STATUS_CHANGE',
  PRIORITY_CHANGE: 'PRIORITY_CHANGE',
  ASSIGNMENT: 'ASSIGNMENT',
  UNASSIGNMENT: 'UNASSIGNMENT',
  TRANSFER_INITIATED: 'TRANSFER_INITIATED',
  SOLUTION_REGISTERED: 'SOLUTION_REGISTERED',
  MATERIAL_REQUESTED: 'MATERIAL_REQUESTED',
  MATERIAL_STATUS_CHANGED: 'MATERIAL_STATUS_CHANGED',
  DEADLINE_CHANGED: 'DEADLINE_CHANGED',
  CLOSED: 'CLOSED',
  REOPENED: 'REOPENED',
  LINKED_INFRA_OCCURRENCE: 'LINKED_INFRA_OCCURRENCE',
  UNLINKED_INFRA_OCCURRENCE: 'UNLINKED_INFRA_OCCURRENCE'
};

exports.InfrastructureOccurrenceStatus = exports.$Enums.InfrastructureOccurrenceStatus = {
  REPORTED: 'REPORTED',
  ANALYZING: 'ANALYZING',
  ACCEPTED: 'ACCEPTED',
  DISMISSED: 'DISMISSED',
  RESOLVED: 'RESOLVED'
};

exports.MaterialRequestStatus = exports.$Enums.MaterialRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PARTIALLY_DELIVERED: 'PARTIALLY_DELIVERED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  LogError: 'LogError',
  LogLogin: 'LogLogin',
  MaintenanceRequest: 'MaintenanceRequest',
  MaintenanceRequestStatus: 'MaintenanceRequestStatus',
  MaintenanceTimelineEvent: 'MaintenanceTimelineEvent',
  MaintenanceInstance: 'MaintenanceInstance',
  ServiceType: 'ServiceType',
  Equipment: 'Equipment',
  InfrastructureOccurrence: 'InfrastructureOccurrence',
  Material: 'Material',
  MaterialRequest: 'MaterialRequest',
  MaterialRequestItem: 'MaterialRequestItem',
  User: 'User',
  MagicLink: 'MagicLink',
  Role: 'Role'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
