model User {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(63)
  login      String      @unique @db.VarChar(63)
  email      String      @unique @db.VarChar(127)
  image      String      @default("") @db.VarChar(255)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now()) @db.Timestamp(0)
  updatedAt  DateTime    @updatedAt @db.Timestamp(0)
  logLogin   LogLogin[]
  roles      Role[]
  magicLinks MagicLink[]

  // Relações: maintenance.prisma
  reportedOccurrences         InfrastructureOccurrence[] @relation("ReportedOccurrences") // Ocorrências de infra reportadas por este usuário
  createdMaintenanceRequests  MaintenanceRequest[]       @relation("CreatedByUser")
  assignedMaintenanceRequests MaintenanceRequest[]       @relation("AssignedToUser")
  timelineEvents              MaintenanceTimelineEvent[] @relation("ActionByUser") // Eventos/ações realizadas por este usuário
  materialRequestsCreated     MaterialRequest[]          @relation("MaterialRequestedByUser")
  materialRequestsApproved    MaterialRequest[]          @relation("MaterialApprovedByUser")

  @@map("users")
}

model MagicLink {
  id        String    @id @default(cuid())
  code      String    @unique // Para garantir que o código seja único
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime  @db.Timestamp(0)
  usedAt    DateTime? // Para marcar se o código já foi usado
  createdAt DateTime  @default(now()) @db.Timestamp(0)

  @@index([userId, code]) // Índice para busca rápida
  @@map("magicLinks")
}

model Role {
  id          Int      @id
  role        String   @db.VarChar(255)
  description String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)
  users       User[]

  @@map("roles")
}
