// Represents a physical or logical location where materials are stored.
model Warehouse {
    id       Int     @id @default(autoincrement()) // Unique identifier for the warehouse.
    name     String  @unique // Name of the warehouse (e.g., "Central Warehouse Block A").
    code     String? @unique // Optional unique code for the warehouse.
    location String? // Physical location description of the warehouse.
    isActive Boolean @default(true) // Indicates if the warehouse is currently active.

    // Each warehouse belongs to one maintenance instance.
    maintenanceInstanceId Int // Foreign key to the maintenance instance this warehouse belongs to.
    maintenanceInstance   MaintenanceInstance @relation(fields: [maintenanceInstanceId], references: [id]) // Relation to the MaintenanceInstance model.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relations
    standardMaterialStocks WarehouseMaterialStock[] // Stock levels for "new" materials in this warehouse.
    materialInstances      MaterialInstance[] // Instances/batches of derived materials in this warehouse.
    stockMovements         MaterialStockMovement[] // Stock movements related to this warehouse.
    StockTransferOrder     StockTransferOrder[]
    StockTransferOrder     StockTransferOrder[]

    @@index([maintenanceInstanceId]) // Index for faster lookups by maintenance instance.
    @@map("warehouses") // Maps this model to the 'warehouses' table.
}

// A global, system-wide catalog of all possible materials.
// Only system administrators can modify this table.
model Material {
    id            Int     @id @default(autoincrement()) // Unique identifier for the material.
    globalCode    String  @unique // A unique global code for the material.
    name          String // The name of the material.
    description   String? @db.Text // Detailed description of the material.
    unitOfMeasure String // The standard unit of measure for this material (e.g., "UNIT", "KG").
    category      String? // The category of the material (e.g., "Electrical", "Hydraulic").
    manufacturer  String? // The manufacturer of the material.
    partNumber    String? // The part number from the manufacturer.
    isActive      Boolean @default(true) // Indicates if the material is active in the global catalog.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relations
    warehouseStandardStocks      WarehouseMaterialStock[] // Stock levels of this material in various warehouses.
    relatedMaterialInstances     MaterialInstance[]       @relation("GlobalMaterialLink") // Derived material instances linked to this global material.
    standardMaterialRequestItems MaterialRequestItem[]    @relation("RequestedGlobalMaterial") // Material request items that request this global material.
    stockMovements               MaterialStockMovement[]  @relation("GlobalMaterialMovements") // Stock movements related to this global material.
    StockTransferOrderItem       StockTransferOrderItem[]

    @@index([globalCode]) // Index for faster lookups by global code.
    @@map("materials_global_catalog") // Maps this model to the 'materials_global_catalog' table.
}

// Represents the stock level of a "new" (standard) material in a specific warehouse.
// This table also serves as a local material catalog for each warehouse.
model WarehouseMaterialStock {
    id Int @id @default(autoincrement()) // Unique identifier for the warehouse material stock record.

    // Foreign keys identifying the material and the warehouse.
    warehouseId Int // Foreign key to the warehouse.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    materialId Int // Foreign key to the global material.
    material   Material @relation(fields: [materialId], references: [id], onDelete: Restrict) // Relation to the Material model.

    // Stock Level Types
    physicalOnHandQuantity Decimal  @default(0) @db.Decimal(12, 3) // Total physical quantity of the material currently in this warehouse.
    initialStockQuantity   Decimal? @db.Decimal(12, 3) // Initial stock recorded upon system implementation or first entry.
    restrictedQuantity     Decimal  @default(0) @db.Decimal(12, 3) // Quantity committed to a specific, paid-for maintenance request.
    reservedQuantity       Decimal  @default(0) @db.Decimal(12, 3) // Quantity allocated for a specific demand, making it unavailable for others.

    // Other local information
    locationInWarehouse String? // Specific location within the warehouse (e.g., "Shelf A, Aisle 3").
    minStockLevel       Decimal?  @db.Decimal(12, 3) // Reorder point for this material in this warehouse.
    maxStockLevel       Decimal?  @db.Decimal(12, 3) // Maximum desired stock level.
    lastStockCountDate  DateTime? // Date of the last physical stock count.
    averageCost         Decimal?  @db.Decimal(12, 4) // Average cost of the material in this warehouse.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record (e.g., when stock levels change).

    // Relations
    stockMovements MaterialStockMovement[] // Stock movements that affect this "new" material stock.

    // A material can only have one stock record per warehouse.
    @@unique([warehouseId, materialId], name: "unique_warehouse_material_standard_stock") // Ensures unique stock record per warehouse and material.
    @@index([materialId]) // Index for faster lookups by material.
    @@map("warehouse_material_stocks") // Maps this model to the 'warehouse_material_stocks' table.
}

// Represents a request for materials needed for a maintenance request.
model MaterialRequest {
    id             Int    @id @default(autoincrement()) // Unique identifier for the material request.
    protocolNumber String @unique @default(uuid()) // A unique protocol number for tracking the request.

    // Defines if the request is for new materials or derived materials.
    requestType MaterialRequestType @default(NEW_MATERIALS)

    justification String?               @db.Text // Justification for the material request.
    requestDate   DateTime              @default(now()) // The date and time when the request was made.
    status        MaterialRequestStatus @default(PENDING) // The current status of the material request.

    maintenanceRequestId Int // Foreign key to the associated maintenance request.
    maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade) // Relation to the MaintenanceRequest model.

    requestedById Int // Foreign key to the user who requested the materials.
    requestedBy   User @relation("MaterialRequestedByUser", fields: [requestedById], references: [id]) // Relation to the User model (who requested).

    approvedById  Int? // Foreign key to the user who approved the material request.
    approvedBy    User?     @relation("MaterialApprovedByUser", fields: [approvedById], references: [id]) // Relation to the User model (who approved).
    approvalDate  DateTime? // The date and time when the request was approved.
    approvalNotes String?   @db.Text // Notes from the approver.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    restrictionOrders MaterialRestrictionOrder[] @relation("RestrictionsForMaterialRequest")

    // Items included in this material request. All items must adhere to the requestType of the header.
    items MaterialRequestItem[]

    @@index([maintenanceRequestId]) // Index for faster lookups by maintenance request.
    @@index([requestedById]) // Index for faster lookups by requesting user.
    @@index([status]) // Index for faster lookups by status.
    @@index([requestType]) // Index for faster lookups by request type.
    @@map("material_requests") // Maps this model to the 'material_requests' table.
}

// Defines the type of materials being requested in a MaterialRequest.
enum MaterialRequestType {
    NEW_MATERIALS // This request is EXCLUSIVELY for new materials from the global catalog.
    DERIVED_MATERIALS // This request is EXCLUSIVELY for derived/repurposed materials.
}

// Defines the possible statuses for a MaterialRequest.
enum MaterialRequestStatus {
    PENDING // Request is pending approval.
    APPROVED // Request has been approved.
    PARTIALLY_ATTENDED // Request has been partially fulfilled.
    FULLY_ATTENDED // Request has been fully fulfilled.
    REJECTED // Request has been rejected.
    CANCELLED // Request has been cancelled.
}

// Represents an individual item within a MaterialRequest.
model MaterialRequestItem {
    id Int @id @default(autoincrement()) // Unique identifier for the material request item.

    materialRequestId Int // Foreign key to the parent material request.
    materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id], onDelete: Cascade) // Relation to the MaterialRequest model.

    requestType MaterialRequestItemType @default(GLOBAL_CATALOG) // Indicates the type of material being requested (global catalog or derived).

    // If MaterialRequest.requestType = NEW_MATERIALS, this item MUST reference a global catalog material.
    requestedGlobalMaterialId Int? // Foreign key to the Material (global catalog).
    requestedGlobalMaterial   Material? @relation("RequestedGlobalMaterial", fields: [requestedGlobalMaterialId], references: [id]) // Relation to the Material model.

    // If MaterialRequest.requestType = DERIVED_MATERIALS, this item MUST describe the desired derived material.
    requestedDerivedName        String? // Name of the desired derived material.
    requestedDerivedConditionId Int? // Desired condition for the derived material.
    requestedDerivedCondition   MaterialInstanceCondition? @relation("RequestedDerivedCondition", fields: [requestedDerivedConditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

    quantityRequested Decimal  @db.Decimal(10, 3) // The quantity of material requested.
    quantityApproved  Decimal? @db.Decimal(10, 3) // The quantity approved by the manager.
    quantityDelivered Decimal  @default(0) @db.Decimal(10, 3) // The quantity effectively delivered.
    unitOfMeasure     String // The unit of measure for the requested quantity.

    // Fulfillment Information (filled by warehouse staff)
    // If a specific instance was used to fulfill this item.
    fulfilledByInstanceId Int?
    fulfilledByInstance   MaterialInstance? @relation("FulfilledByInstance", fields: [fulfilledByInstanceId], references: [id], onDelete: SetNull) // Relation to the MaterialInstance model.

    notes String? @db.Text // Observations from the requester or warehouse staff for this item.

    stockMovements MaterialStockMovement[] // Stock movements that fulfilled this item.

    createdAt                   DateTime                   @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt                   DateTime                   @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
    materialInstanceCondition   MaterialInstanceCondition? @relation(fields: [materialInstanceConditionId], references: [id]) // Relation to MaterialInstanceCondition.
    materialInstanceConditionId Int? // Foreign key to MaterialInstanceCondition.

    withdrawalOrders MaterialWithdrawalOrder[]

    materialRestrictions MaterialRestrictionOrderItem[] @relation("RestrictionsForRequestItem")

    @@map("material_request_items") // Maps this model to the 'material_request_items' table.
}

// Defines the type of material requested within a MaterialRequestItem.
enum MaterialRequestItemType {
    GLOBAL_CATALOG // Request for a new/standard item from the global catalog.
    DERIVED_MATERIAL // Request for a derived material (e.g., leftover, processed).
}

// Defines different types of stock movements, offering more flexibility than an enum.
model StockMovementType {
    id          Int                @id @default(autoincrement()) // Unique identifier for the stock movement type.
    code        String             @unique // Short code for the type (e.g., "ENTRY_PURCHASE", "EXIT_USAGE").
    name        String // User-friendly name (e.g., "Entry from Purchase", "Exit for Usage").
    description String?            @db.Text // Detailed description of the movement type.
    operation   StockOperationType // Defines if it's an IN (increase), OUT (decrease), or ADJUSTMENT.
    isActive    Boolean            @default(true) // Indicates if the movement type is active.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relation
    stockMovements MaterialStockMovement[] // Stock movements associated with this type.

    @@map("stock_movement_types") // Maps this model to the 'stock_movement_types' table.
}

// Classifies the general operation of a StockMovementType.
enum StockOperationType {
    IN // Represents an increase in stock (e.g., purchase, return).
    OUT // Represents a decrease in stock (e.g., usage, disposal).
    ADJUSTMENT // Represents an adjustment that could be positive or negative (e.g., stock count).
    RESERVATION // Represents a change in reserved/restricted quantity, not physical stock.
}

// Records individual material stock transactions (log of all movements).
model MaterialStockMovement {
    id Int @id @default(autoincrement()) // Unique identifier for the stock movement.

    warehouseId Int // Foreign key to the warehouse where the movement occurred.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    // The global material type involved, if applicable.
    globalMaterialId Int?
    globalMaterial   Material? @relation("GlobalMaterialMovements", fields: [globalMaterialId], references: [id], onDelete: Restrict) // Relation to the Material model.

    // The specific material instance involved, if applicable.
    materialInstanceId Int?
    materialInstance   MaterialInstance? @relation("InstanceStockMovements", fields: [materialInstanceId], references: [id], onDelete: Restrict) // Relation to the MaterialInstance model.

    movementTypeId Int // Foreign key to the type of stock movement.
    movementType   StockMovementType @relation(fields: [movementTypeId], references: [id]) // Relation to the StockMovementType model.

    quantity      Decimal  @db.Decimal(12, 3) // Quantity of material moved in the unit of the instance or global material.
    unitOfMeasure String // Unit of measure for the movement.
    movementDate  DateTime @default(now()) // The date and time of the movement.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Usuário do almoxarifado que processou a saída
    processedByUserId Int? // Renomeado de userId para clareza, ou pode ser o almoxarife logado
    processedByUser   User? @relation("StockMovementsProcessedBy", fields: [processedByUserId], references: [id], onDelete: SetNull)

    // Usuário que EFETIVAMENTE RETIROU o material
    collectedByUserId Int? // Pode ser diferente do solicitante ou do técnico da OS
    collectedByUser   User? @relation("StockMovementsCollectedBy", fields: [collectedByUserId], references: [id], onDelete: SetNull)

    WarehouseMaterialStock   WarehouseMaterialStock? @relation(fields: [warehouseMaterialStockId], references: [id]) // Relation to WarehouseMaterialStock.
    warehouseMaterialStockId Int? // Foreign key to WarehouseMaterialStock.
    MaterialRequestItem      MaterialRequestItem?    @relation(fields: [materialRequestItemId], references: [id]) // Relation to MaterialRequestItem.
    materialRequestItemId    Int? // Foreign key to MaterialRequestItem.

    maintenanceRequestId Int? // Para vincular saídas de emergência diretamente à OS
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

    // Referências de origem da movimentação (apenas UMA delas será preenchida)
    materialWithdrawalItemId Int?                    @unique // Se originado por um item de uma retirada efetiva
    materialWithdrawalItem   MaterialWithdrawalItem? @relation(fields: [materialWithdrawalItemId], references: [id], onDelete: SetNull) // onDelete:SetNull ou Cascade? Se o item da retirada for deletado, o movimento deve sumir? Melhor SetNull e tratar.

    materialReceiptItemId Int?                 @unique
    materialReceiptItem   MaterialReceiptItem? @relation(fields: [materialReceiptItemId], references: [id], onDelete: SetNull)

    stockTransferOrderItemId Int?                    @unique
    stockTransferOrderItem   StockTransferOrderItem? @relation(fields: [stockTransferOrderItemId], references: [id], onDelete: SetNull)

    @@index([globalMaterialId]) // Index for faster lookups by global material.
    @@index([materialInstanceId]) // Index for faster lookups by material instance.
    @@map("material_stock_movements") // Maps this model to the 'material_stock_movements' table.
}

// ID | CODE                | NAME                       | OPERATION   | DESCRIPTION
// ---|---------------------|----------------------------|-------------|------------
// 1  | INITIAL_STOCK_LOAD  | Initial Stock Load         | IN          | Carga inicial de saldo no sistema.
// 2  | ENTRY_PURCHASE      | Entry from Purchase        | IN          | Entrada por compra de fornecedor.
// 3  | ENTRY_TRANSFER      | Entry from Transfer        | IN          | Entrada por transferência de outro depósito.
// 4  | ENTRY_RETURN        | Entry from Return          | IN          | Devolução de material não utilizado em OS.
// 5  | EXIT_USAGE          | Exit for Usage             | OUT         | Saída para uso em Requisição de Manutenção.
// 6  | EXIT_TRANSFER       | Exit for Transfer          | OUT         | Saída por transferência para outro depósito.
// 7  | EXIT_DISPOSAL       | Exit for Disposal          | OUT         | Saída por descarte, perda ou obsolescência.
// 8  | ADJUSTMENT_POSITIVE | Positive Stock Adjustment  | ADJUSTMENT  | Ajuste de contagem de estoque (aumento).
// 9  | ADJUSTMENT_NEGATIVE | Negative Stock Adjustment  | ADJUSTMENT  | Ajuste de contagem de estoque (diminuição).
// 10 | RESERVE             | Reserve Stock              | RESERVATION | Marcar uma quantidade como reservada.
// 11 | RELEASE_RESERVATION | Release Reserved Stock     | RESERVATION | Liberar uma quantidade reservada.
// 12 | RESTRICT            | Restrict Stock (Paid)      | RESERVATION | Marcar quantidade como restrita (paga).
// 13 | RELEASE_RESTRICTION | Release Restricted Stock   | RESERVATION | Liberar uma quantidade restrita.

// Defines the possible states or conditions of a derived/used material instance.
model MaterialInstanceCondition {
    id                  Int                   @id @default(autoincrement()) // Unique identifier for the material instance condition.
    code                String                @unique // Short code for the condition (e.g., "GOOD", "DAMAGED").
    name                String // User-friendly name of the condition.
    description         String?               @db.Text // Detailed description of the condition.
    isUsable            Boolean               @default(true) // Indicates if materials in this condition are generally usable.
    createdAt           DateTime              @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt           DateTime              @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
    materialInstances   MaterialInstance[] // Material instances with this condition.
    requestedInItems    MaterialRequestItem[] @relation("RequestedDerivedCondition") // Material request items that requested this condition.
    MaterialRequestItem MaterialRequestItem[] // Material request items related to this condition.

    @@map("material_instance_conditions") // Maps this model to the 'material_instance_conditions' table.
}

// Represents a specific instance or batch of a material, especially derived or with a specific state.
model MaterialInstance {
    id                 Int    @id @default(autoincrement()) // Unique identifier for the material instance.
    instanceIdentifier String @unique @default(uuid()) // Unique identifier for this specific instance/batch.

    // Optional link to the global material catalog.
    // Filled if this instance is a leftover/processed version of a known global item.
    // Null if it's a new item generated locally without a global counterpart.
    globalMaterialId Int?
    globalMaterial   Material? @relation("GlobalMaterialLink", fields: [globalMaterialId], references: [id], onDelete: SetNull) // Relation to the Material model.

    // Specific description of the instance (especially if globalMaterialId is null).
    derivedName          String // Specific name of this derived instance/type (e.g., "Cut Steel Plate 30x50cm").
    derivedDescription   String? @db.Text // Detailed description of the derived material.
    derivedUnitOfMeasure String // Unit of measure for THIS instance (may differ from globalMaterial).

    warehouseId Int // Foreign key to the warehouse where this instance is stored.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    conditionId Int // Foreign key to the condition of this material instance.
    condition   MaterialInstanceCondition @relation(fields: [conditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

    quantity            Decimal @db.Decimal(12, 3) // Current quantity of this instance.
    locationInWarehouse String? // Specific location within the warehouse for this instance.

    sourceNotes String? @db.Text // Notes about the origin of this instance (e.g., "Leftover from WO-123").

    // Reserved/Restricted balance SPECIFIC to this instance.
    reservedQuantity   Decimal @default(0) @db.Decimal(12, 3) // Quantity reserved for specific demands.
    restrictedQuantity Decimal @default(0) @db.Decimal(12, 3) // Quantity restricted for specific, paid-for requests.

    // Relations
    stockMovements        MaterialStockMovement[] @relation("InstanceStockMovements") // Stock movements related to this instance.
    fulfilledRequestItems MaterialRequestItem[]   @relation("FulfilledByInstance") // Material request items fulfilled by this specific instance.

    createdAt              DateTime                 @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt              DateTime                 @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
    StockTransferOrderItem StockTransferOrderItem[]

    @@index([globalMaterialId]) // Index for faster lookups by global material.
    @@index([warehouseId]) // Index for faster lookups by warehouse.
    @@index([conditionId]) // Index for faster lookups by condition.
    @@index([derivedName]) // Index for searching by derived name.
    @@map("material_instances") // Maps this model to the 'material_instances' table.
}

// --- Material Picking Order (Cabeçalho da Ordem de Separação/Reserva de Material) ---
// Solicitação para o almoxarifado separar e/O reservar materiais para uma retirada futura.
model MaterialPickingOrder {
    id                 Int    @id @default(autoincrement())
    pickingOrderNumber String @unique @default(uuid()) // Protocolo da ordem de separação

    // Para qual MaterialRequest esta ordem de separação se destina
    materialRequestId Int
    materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id])

    // Almoxarifado que deve separar os materiais
    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    // Usuário que solicitou a separação (geralmente o técnico ou planejador)
    requestedByUserId Int
    requestedByUser   User     @relation("PickingOrdersRequestedBy", fields: [requestedByUserId], references: [id])
    requestedAt       DateTime @default(now())

    // Data desejada para retirada (opcional)
    desiredPickupDate DateTime?

    status PickingOrderStatus @default(PENDING_PREPARATION)
    // PENDENTE_PREPARACAO, EM_PREPARACAO, PRONTO_PARA_RETIRADA, PARCIALMENTE_RETIRADO, TOTALMENTE_RETIRADO, CANCELADO

    notes String? @db.Text // Instruções para o almoxarifado

    items MaterialPickingOrderItem[] // Itens a serem separados/reservados

    // Relação com as retiradas efetivas que atenderam esta ordem de separação
    materialWithdrawals MaterialWithdrawal[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([materialRequestId])
    @@index([warehouseId])
    @@index([requestedByUserId])
    @@index([status])
    @@map("material_picking_orders")
}

enum PickingOrderStatus {
    PENDING_PREPARATION // Aguardando almoxarifado iniciar a separação/reserva
    IN_PREPARATION // Almoxarifado está separando/reservando os itens
    READY_FOR_PICKUP // Materiais separados/reservados, aguardando retirada
    PARTIALLY_WITHDRAWN // Parte dos itens desta ordem já foi retirada
    FULLY_WITHDRAWN // Todos os itens desta ordem foram retirados
    CANCELLED // Ordem de separação cancelada
}

// --- Material Picking Order Item (Detalhe da Ordem de Separação/Reserva) ---
// Cada material e quantidade a ser separado/reservado.
model MaterialPickingOrderItem {
    id Int @id @default(autoincrement())

    materialPickingOrderId Int
    materialPickingOrder   MaterialPickingOrder @relation(fields: [materialPickingOrderId], references: [id], onDelete: Cascade)

    // Referência ao item da Requisição de Material original
    materialRequestItemId Int
    materialRequestItem   MaterialRequestItem @relation(fields: [materialRequestItemId], references: [id])

    // O material específico a ser separado (redundante se já está no materialRequestItem, mas útil para resumo)
    // globalMaterialId     Int?
    // globalMaterial       Material? @relation(fields: [globalMaterialId], references: [id])
    // materialInstanceId   Int?
    // materialInstance     MaterialInstance? @relation(fields: [materialInstanceId], references: [id])

    quantityToPick Decimal @db.Decimal(10, 3) // Quantidade a ser separada/reservada para este item
    unitOfMeasure  String // Unidade de medida

    // Informações preenchidas pelo almoxarifado durante a preparação
    quantityPicked Decimal? @db.Decimal(10, 3) // Quantidade efetivamente separada/reservada
    // pickedFromInstanceId Int? // Se uma instância específica foi alocada durante o picking
    // pickedFromInstance   MaterialInstance? @relation(fields: [pickedFromInstanceId], references: [id])
    // notes                String? // Notas específicas do almoxarife sobre este item do picking

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([materialPickingOrderId])
    @@index([materialRequestItemId])
    @@map("material_picking_order_items")
}

// --- Material Withdrawal (Cabeçalho da Retirada Efetiva de Materiais) ---
// Representa um único evento de retirada física de um conjunto de materiais.
model MaterialWithdrawal {
    id               Int    @id @default(autoincrement())
    withdrawalNumber String @unique @default(uuid()) // Protocolo da retirada

    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    // Usuário do almoxarifado que processou a saída no sistema
    processedByUserId Int
    processedByUser   User @relation("WithdrawalsProcessedBy", fields: [processedByUserId], references: [id])

    // Usuário que EFETIVAMENTE RETIROU o conjunto de materiais
    collectedByUserId Int
    collectedByUser   User @relation("WithdrawalsCollectedBy", fields: [collectedByUserId], references: [id])

    withdrawalDate DateTime @default(now()) // Data e hora da retirada

    // Referência à demanda principal que motivou esta retirada
    maintenanceRequestId Int?
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

    materialRequestId Int? // A MaterialRequest GERAL que está sendo atendida
    materialRequest   MaterialRequest? @relation(fields: [materialRequestId], references: [id], onDelete: SetNull)

    // Se esta retirada foi originada por uma Ordem de Separação/Reserva específica
    materialPickingOrderId Int?
    materialPickingOrder   MaterialPickingOrder? @relation(fields: [materialPickingOrderId], references: [id], onDelete: SetNull)

    // Tipo geral da movimentação para este "pacote" (ex: SAIDA_USO_OS, SAIDA_EMERGENCIA)
    movementTypeId Int
    movementType   StockMovementType @relation(fields: [movementTypeId], references: [id])

    notes String? @db.Text

    items MaterialWithdrawalItem[] // Os materiais que compõem esta retirada

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([warehouseId])
    @@index([processedByUserId])
    @@index([collectedByUserId])
    @@index([withdrawalDate])
    @@index([maintenanceRequestId])
    @@index([materialRequestId])
    @@index([materialPickingOrderId])
    @@index([movementTypeId])
    @@map("material_withdrawals")
}

// --- Material Withdrawal Item (Detalhe da Retirada Efetiva) ---
// Cada material e quantidade que compôs uma MaterialWithdrawal.
model MaterialWithdrawalItem {
    id Int @id @default(autoincrement())

    materialWithdrawalId Int
    materialWithdrawal   MaterialWithdrawal @relation(fields: [materialWithdrawalId], references: [id], onDelete: Cascade)

    // O material específico que foi retirado
    globalMaterialId   Int?
    globalMaterial     Material?         @relation(fields: [globalMaterialId], references: [id], onDelete: Restrict)
    materialInstanceId Int?
    materialInstance   MaterialInstance? @relation(fields: [materialInstanceId], references: [id], onDelete: Restrict)

    quantityWithdrawn Decimal @db.Decimal(12, 3)
    unitOfMeasure     String

    // Se este item está atendendo um MaterialRequestItem específico
    // Este link é crucial para atualizar o status da demanda original.
    materialRequestItemId Int?
    materialRequestItem   MaterialRequestItem? @relation("WithdrawalForRequestItem", fields: [materialRequestItemId], references: [id], onDelete: SetNull)

    // O MaterialStockMovement é gerado por este MaterialWithdrawalItem.
    // Cada MaterialWithdrawalItem RESULTA em UM MaterialStockMovement de SAÍDA.
    // stockMovementId      Int      @unique
    // stockMovement        MaterialStockMovement @relation(fields: [stockMovementId], references: [id])

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([materialWithdrawalId])
    @@index([globalMaterialId])
    @@index([materialInstanceId])
    @@index([materialRequestItemId])
    @@map("material_withdrawal_items")
}

enum WithdrawalOrderStatus {
    PENDING_PICKING // Aguardando separação pelo almoxarifado
    READY_FOR_PICKUP // Material separado, aguardando retirada pelo técnico
    PARTIALLY_PICKED_UP // Parte retirada, parte ainda aguardando (se aplicável)
    FULLY_PICKED_UP // Totalmente retirado
    CANCELLED // Ordem de retirada cancelada
}

// --- Stock Transfer Order (Cabeçalho da Ordem de Transferência) ---
model StockTransferOrder {
    id                  Int    @id @default(autoincrement())
    transferOrderNumber String @unique @default(uuid()) // Protocolo da transferência

    originWarehouseId Int
    originWarehouse   Warehouse @relation("TransfersFromWarehouse", fields: [originWarehouseId], references: [id])

    destinationWarehouseId Int
    destinationWarehouse   Warehouse @relation("TransfersToWarehouse", fields: [destinationWarehouseId], references: [id])

    status StockTransferStatus @default(PENDING_APPROVAL) // PENDENTE_APROVACAO, APROVADA, EM_TRANSITO, RECEBIDA_PARCIAL, RECEBIDA_TOTAL, CANCELADA

    requestedByUserId Int
    requestedByUser   User     @relation("TransferOrdersRequestedBy", fields: [requestedByUserId], references: [id])
    requestedAt       DateTime @default(now())

    // Quem aprovou a transferência (pode ser gerente do almox. origem ou um centralizador)
    approvedByUserId Int?
    approvedByUser   User?     @relation("TransferOrdersApprovedBy", fields: [approvedByUserId], references: [id])
    approvedAt       DateTime?

    // Quem despachou do almoxarifado de origem
    shippedByUserId Int?
    shippedByUser   User?     @relation("TransferOrdersShippedBy", fields: [shippedByUserId], references: [id])
    shippedAt       DateTime?

    // Quem recebeu no almoxarifado de destino
    receivedByUserId Int?
    receivedByUser   User?     @relation("TransferOrdersReceivedBy", fields: [receivedByUserId], references: [id])
    receivedAt       DateTime? // Data do último recebimento

    notes String? @db.Text
    // Pode estar vinculada a uma MaterialRequest original que disparou a necessidade de transferência
    // sourceMaterialRequestId Int?
    // sourceMaterialRequest   MaterialRequest? @relation(fields: [sourceMaterialRequestId], references: [id])

    items StockTransferOrderItem[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([originWarehouseId])
    @@index([destinationWarehouseId])
    @@index([status])
    @@map("stock_transfer_orders")
}

enum StockTransferStatus {
    PENDING_APPROVAL // Aguardando aprovação para a transferência
    APPROVED // Aprovada, aguardando despacho do almoxarifado de origem
    REJECTED // Transferência Rejeitada
    PENDING_SHIPMENT // Aprovada, aguardando o almoxarifado de origem separar e despachar
    IN_TRANSIT // Materiais despachados, aguardando recebimento no destino
    PARTIALLY_RECEIVED // Parte dos materiais recebida no destino
    FULLY_RECEIVED // Todos os materiais recebidos no destino
    CANCELLED // Transferência cancelada
}

// --- Stock Transfer Order Item (Itens da Ordem de Transferência) ---
model StockTransferOrderItem {
    id Int @id @default(autoincrement())

    stockTransferOrderId Int
    stockTransferOrder   StockTransferOrder @relation(fields: [stockTransferOrderId], references: [id], onDelete: Cascade)

    // O que está sendo transferido:
    // Pode ser um material NOVO do catálogo global
    materialId Int?
    material   Material? @relation(fields: [materialId], references: [id])

    // OU uma INSTÂNCIA ESPECÍFICA de material
    materialInstanceId Int?
    materialInstance   MaterialInstance? @relation(fields: [materialInstanceId], references: [id])
    // Validação: Ou materialId ou materialInstanceId deve ser preenchido

    quantityRequested Decimal @db.Decimal(10, 3)
    unitOfMeasure     String // Unidade da solicitação/transferência

    // Preenchido pelo almoxarifado de ORIGEM
    quantityShipped Decimal? @db.Decimal(10, 3) // Quantidade efetivamente despachada

    // Preenchido pelo almoxarifado de DESTINO
    quantityReceived Decimal @default(0) @db.Decimal(10, 3) // Quantidade efetivamente recebida até o momento

    // Rastreamento de movimentações de estoque ligadas a este item de transferência
    // (uma de SAÍDA na origem, uma de ENTRADA no destino)
    stockMovements MaterialStockMovement[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("stock_transfer_order_items")
}

// Adicionar relações ao User, Warehouse, Material, MaterialInstance
// model User {
//   ...
//   transferOrdersRequested StockTransferOrder[] @relation("TransferOrdersRequestedBy")
//   transferOrdersApproved  StockTransferOrder[] @relation("TransferOrdersApprovedBy")
//   transferOrdersShipped   StockTransferOrder[] @relation("TransferOrdersShippedBy")
//   transferOrdersReceived  StockTransferOrder[] @relation("TransferOrdersReceivedBy")
// }
// model Warehouse {
//   ...
//   transfersFromThisWarehouse StockTransferOrder[] @relation("TransfersFromWarehouse")
//   transfersToThisWarehouse   StockTransferOrder[] @relation("TransfersToWarehouse")
// }
// model Material { // ou MaterialInstance
//   ...
//   stockTransferOrderItems StockTransferOrderItem[]
// }

// --- Material Receipt (Registro de Recebimento de Materiais Externos) ---
model MaterialReceipt {
    id                Int      @id @default(autoincrement())
    receiptNumber     String   @unique @default(uuid()) // Protocolo interno do recebimento
    externalReference String? // Número da Nota Fiscal, documento de doação, etc.
    receiptDate       DateTime @default(now())

    sourceType ReceiptSourceType // PURCHASE, DONATION, OTHER
    sourceName String? // Nome do Fornecedor, Doador

    destinationWarehouseId Int
    destinationWarehouse   Warehouse @relation("ReceiptsAtWarehouse", fields: [destinationWarehouseId], references: [id])

    processedByUserId Int // Usuário que processou o recebimento
    processedByUser   User @relation("ReceiptsProcessedBy", fields: [processedByUserId], references: [id])

    status MaterialReceiptStatus @default(PENDING_INSPECTION)

    notes String? @db.Text

    items MaterialReceiptItem[] // Itens recebidos

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([destinationWarehouseId])
    @@index([receiptDate])
    @@index([sourceType])
    @@map("material_receipts") // Novo nome da tabela
}

// Enum ReceiptSourceType permanece o mesmo (PURCHASE, DONATION, OTHER)

enum MaterialReceiptStatus {
    PENDING_INSPECTION
    PARTIALLY_ACCEPTED
    FULLY_ACCEPTED
    REJECTED_TOTAL
    CANCELLED
}

// --- Material Receipt Item (Itens do Recebimento de Material) ---
model MaterialReceiptItem {
    id Int @id @default(autoincrement())

    materialReceiptId Int
    materialReceipt   MaterialReceipt @relation(fields: [materialReceiptId], references: [id], onDelete: Cascade)

    materialId Int
    material   Material @relation(fields: [materialId], references: [id])

    quantityExpected Decimal @db.Decimal(10, 3)
    unitOfMeasure    String

    quantityReceived Decimal? @db.Decimal(10, 3)
    quantityAccepted Decimal? @db.Decimal(10, 3)
    quantityRejected Decimal? @db.Decimal(10, 3)
    rejectionReason  String?  @db.Text

    batchNumber    String?
    expirationDate DateTime?
    unitPrice      Decimal?  @db.Decimal(12, 4)

    stockMovementId Int?                   @unique
    stockMovement   MaterialStockMovement? @relation(fields: [stockMovementId], references: [id])

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("material_receipt_items") // Novo nome da tabela
}

// Atualizar relações em User e Warehouse:
// model User {
//   ...
//   receiptsProcessed MaterialReceipt[] @relation("ReceiptsProcessedBy")
// }
// model Warehouse {
//   ...
//   receiptsAtThisWarehouse MaterialReceipt[] @relation("ReceiptsAtWarehouse")
// }

// --- Material Restriction Order (Cabeçalho) ---
model MaterialRestrictionOrder {
    id                     Int    @id @default(autoincrement())
    restrictionOrderNumber String @unique @default(uuid())

    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    operationType RestrictionOperationType // RESTRICT, RELEASE_RESTRICTION

    processedByUserId Int
    processedByUser   User     @relation("RestrictionOrdersProcessedBy", fields: [processedByUserId], references: [id])
    processedAt       DateTime @default(now())

    // Se a ordem de restrição como um todo está relacionada a UMA MaterialRequest específica
    // (Isso é útil se todos os itens da restrição são para a mesma MaterialRequest)
    targetMaterialRequestId Int?
    targetMaterialRequest   MaterialRequest? @relation("RestrictionsForMaterialRequest", fields: [targetMaterialRequestId], references: [id], onDelete: SetNull)

    status RestrictionOrderStatus @default(PENDING)
    notes  String?                @db.Text

    items MaterialRestrictionOrderItem[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([targetMaterialRequestId]) // Novo índice
    @@map("material_restriction_orders")
}

enum RestrictionOperationType {
    RESTRICT // Marcar materiais como restritos
    RELEASE_RESTRICTION // Liberar materiais que estavam restritos
}

enum RestrictionOrderStatus {
    PENDING // Ordem criada, aguardando efetivação da restrição/liberação no estoque
    EFFECTIVE // Restrição/liberação aplicada ao estoque
    PARTIALLY_REVERSED // Se uma restrição foi parcialmente liberada por uma ordem subsequente
    FULLY_REVERSED // Se uma restrição foi totalmente liberada por uma ordem subsequente
    CANCELLED // Ordem cancelada antes da efetivação
}

// --- Material Restriction Order Item (Detalhe da Ordem de Restrição/Liberação) ---
model MaterialRestrictionOrderItem {
    id Int @id @default(autoincrement())

    materialRestrictionOrderId Int
    materialRestrictionOrder   MaterialRestrictionOrder @relation(fields: [materialRestrictionOrderId], references: [id], onDelete: Cascade)

    // O material específico a ser restringido/liberado
    globalMaterialId   Int?
    globalMaterial     Material?         @relation(fields: [globalMaterialId], references: [id], onDelete: Restrict)
    materialInstanceId Int?
    materialInstance   MaterialInstance? @relation(fields: [materialInstanceId], references: [id], onDelete: Restrict)

    quantity      Decimal @db.Decimal(12, 3)
    unitOfMeasure String

    // *** RELAÇÃO CRUCIAL ADICIONADA/REFORÇADA ***
    // Para qual MaterialRequestItem esta restrição/liberação específica se aplica.
    // Isso é essencial se a restrição é porque o material foi "comprado para" ou "alocado para" este item de demanda.
    targetMaterialRequestItemId Int? // Tornar opcional se uma restrição puder existir sem um item de requisição direto (ex: reserva estratégica)
    targetMaterialRequestItem   MaterialRequestItem? @relation("RestrictionsForRequestItem", fields: [targetMaterialRequestItemId], references: [id], onDelete: SetNull)

    // stockMovementId          Int?     @unique
    // stockMovement            MaterialStockMovement? @relation(fields: [stockMovementId], references: [id])

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([targetMaterialRequestItemId]) // Novo índice
    @@map("material_restriction_order_items")
}
