//Centro de distribuição, controle físico e financeiro de materiais
// Não é vinculado a uma instância de manutenção específica, na verdade, pode atender (e atende) várias instâncias
// A gestão do centro de distribuição está mais próxima do departamento financeiro do que do departamento de manutencão
//Nessa implementação não será dado destaque à gestão do Storage (centro de distribuição) será considerada como uma entidade externa
model Storage {
    id   Int    @id @default(autoincrement()) // Unique identifier.
    name String

    //relations
    materialRequests MaterialRequest[]

    @@map("storages")
}

// Represents a physical or logical location where materials are stored.
// depósito transitório, controle apenas físico de materiais 
model Warehouse {
    id       Int     @id @default(autoincrement()) // Unique identifier for the warehouse.
    name     String  @unique // Name of the warehouse (e.g., "Central Warehouse Block A").
    code     String? @unique // Optional unique code for the warehouse.
    location String? // Physical location description of the warehouse.
    //TODO: building to replace location
    isActive Boolean @default(true) // Indicates if the warehouse is currently active.

    // Each warehouse belongs to one maintenance instance.
    maintenanceInstanceId Int // Foreign key to the maintenance instance this warehouse belongs to.
    maintenanceInstance   MaintenanceInstance @relation(fields: [maintenanceInstanceId], references: [id]) // Relation to the MaintenanceInstance model.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relations
    standardMaterialStocks         MaterialWarehouseStock[] // Stock levels for "new" materials in this warehouse.
    materialDerived                MaterialDerived[] // Instances/batches of derived materials in this warehouse.
    stockMovements                 MaterialStockMovement[] // Stock movements related to this warehouse.
    materialTransfersFromWarehouse MaterialTransferOrder[]    @relation("TransfersFromWarehouse")
    materialTransfersToWarehouse   MaterialTransferOrder[]    @relation("TransfersToWarehouse")
    materialPickingOrders          MaterialPickingOrder[]
    materialWithdrawals            MaterialWithdrawal[]
    materialReceipts               MaterialReceipt[]          @relation("ReceiptsAtWarehouse")
    materialRestrictionOrders      MaterialRestrictionOrder[]

    @@index([maintenanceInstanceId]) // Index for faster lookups by maintenance instance.
    @@map("warehouses") // Maps this model to the 'warehouses' table.
}

// A global, system-wide catalog of all possible materials.
// Only system administrators can modify this table.
model MaterialGlobalCatalog {
    id            String  @id // Unique identifier for the material.
    // code          String? @unique // A unique global code for the material. @map("sipacCode")
    codeSidec     String?
    name          String  @db.VarChar(255) // The name of the material.
    description   String? @db.Text // Detailed description of the material.
    unitOfMeasure String // The standard unit of measure for this material (e.g., "UNIT", "KG").
    groupId       Int? // The category id of the material (e.g., "Electrical", "Hydraulic"). @map("categoryId")
    subGroupId    Int?
    photoUrl      String? // URL to an image representing the material.
    isActive      Boolean @default(true) // Indicates if the material is active in the global catalog.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relations
    warehouseStandardStocks         MaterialWarehouseStock[] // Stock levels of this material in various warehouses.
    materialsDerived                MaterialDerived[]              @relation("GlobalMaterialLink") // Derived material instances linked to this global material.
    materialRequestItems            MaterialRequestItem[]          @relation("RequestedGlobalMaterial") // Material request items that request this global material.
    materialStockMovements          MaterialStockMovement[]        @relation("GlobalMaterialMovements") // Stock movements related to this global material.
    materialStockTransferOrderItems MaterialTransferOrderItem[]
    materialWithdrawalItems         MaterialWithdrawalItem[]
    materialReceiptItems            MaterialReceiptItem[]
    materialRestrictionOrderItems   MaterialRestrictionOrderItem[]

    // @@index([code]) // Index for faster lookups by global code.
    @@map("material_global_catalog") // Maps this model to the 'materials_global_catalog' table.
}

// Represents the stock level of a "new" (standard) material in a specific warehouse.
// This table also serves as a local material catalog for each warehouse.
model MaterialWarehouseStock {
    id Int @id @default(autoincrement()) // Unique identifier for the warehouse material stock record.

    // Foreign keys identifying the material and the warehouse.
    warehouseId Int // Foreign key to the warehouse.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    materialId String // Foreign key to the global material.
    material   MaterialGlobalCatalog @relation(fields: [materialId], references: [id], onDelete: Restrict) // Relation to the Material model.

    // Stock Level Types
    physicalOnHandQuantity Decimal  @default(0) @db.Decimal(12, 2) // Total physical quantity of the material currently in this warehouse.
    initialStockQuantity   Decimal? @db.Decimal(12, 2) // Initial stock recorded upon system implementation or first entry.
    restrictedQuantity     Decimal  @default(0) @db.Decimal(12, 2) // Quantity committed to a specific, paid-for maintenance request.
    reservedQuantity       Decimal  @default(0) @db.Decimal(12, 2) // Quantity allocated for a specific demand, making it unavailable for others.

    // Other local information
    locationInWarehouse String? // Specific location within the warehouse (e.g., "Shelf A, Aisle 3").
    minStockLevel       Decimal?  @db.Decimal(12, 2) // Reorder point for this material in this warehouse.
    maxStockLevel       Decimal?  @db.Decimal(12, 2) // Maximum desired stock level.
    lastStockCountDate  DateTime? // Date of the last physical stock count.
    updatedCost         Decimal?  @db.Decimal(12, 4) // Updated cost of the material in this warehouse.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record (e.g., when stock levels change).

    // Relations
    stockMovements MaterialStockMovement[] // Stock movements that affect this "new" material stock.

    // A material can only have one stock record per warehouse.
    @@unique([warehouseId, materialId], name: "unique_warehouse_material_standard_stock") // Ensures unique stock record per warehouse and material.
    @@index([materialId]) // Index for faster lookups by material.
    @@map("material_warehouse_stocks") // Maps this model to the 'warehouse_material_stocks' table.
}

// Represents a request for materials needed for a maintenance request or just for inventory.
model MaterialRequest {
    id             Int    @id @default(autoincrement()) // Unique identifier for the material request.
    protocolNumber String @unique @default(uuid()) // A unique protocol number for tracking the request.

    // Defines if the request is for new materials or derived materials.
    requestType MaterialRequestType    @default(NEW_MATERIALS)
    purpose     MaterialRequestPurpose @default(SUPPLY_MAINTENANCE)

    justification        String?             @db.Text // Justification for the material request.
    requestDate          DateTime            @default(now()) // The date and time when the request was made.
    maintenanceRequestId Int? // Foreign key to the associated maintenance request.
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id]) // Relation to the MaintenanceRequest model.

    requestedById Int? // Foreign key to the user who requested the materials.
    requestedBy   User? @relation("MaterialRequestedByUser", fields: [requestedById], references: [id]) // Relation to the User model (who requested).

    notes String? @db.Text // Notes related to this status change (e.g., approval notes, rejection reason).

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    //campos compatibilidade sipac
    //unidades
    sipacUnitRequestingId Int?
    sipacUnitRequesting   SipacUnidade? @relation("unidadeRequisitanteMaterialRequest", fields: [sipacUnitRequestingId], references: [id])
    sipacUnitCostId       Int?
    sipacUnitCost         SipacUnidade? @relation("unidadeCustoMaterialRequest", fields: [sipacUnitCostId], references: [id])

    origin                MaterialRequestOrigin @default(SISMAN) // Origem da requisicao
    sipacUserLoginRequest String? // usuario que realizou a requisicao

    //
    requestValue Decimal? @db.Decimal(12, 4) //valor da requisicao
    servedValue  Decimal? @db.Decimal(12, 4) //valor atendido

    // Relations
    restrictionOrders MaterialRestrictionOrder? @relation("RestrictionsForMaterialRequest")

    // Items included in this material request. All items must adhere to the requestType of the header.
    items         MaterialRequestItem[]
    statusHistory MaterialRequestStatus[] // History of status changes for this request
    currentStatus MaterialRequestStatusOptions @default(PENDING) // The current status of the request.

    // Other relations
    storageId Int
    storage   Storage @relation(fields: [storageId], references: [id]) // Relation to the storage model.

    materialPickingOrders MaterialPickingOrder[]
    materialWithdrawals   MaterialWithdrawal[]

    materialReceipt MaterialReceipt? @relation("ReceiptsForMaterialRequest")

    @@index([maintenanceRequestId]) // Index for faster lookups by maintenance request.
    @@index([requestedById]) // Index for faster lookups by requesting user.
    @@index([requestType]) // Index for faster lookups by request type.
    @@map("material_requests") // Maps this model to the 'material_requests' table.
}

enum MaterialRequestOrigin {
    SIPAC
    SISMAN
}

enum MaterialRequestPurpose {
    SUPPLY_WAREHOUSE   @map("ALMOXARIFADO") //abastecimento de almoxarifado, óleos, brocas, etc
    SUPPLY_MAINTENANCE @map("MANUTENCAO") //atendimento direcionado a requisição de manutenção
}

// Defines the type of materials being requested in a MaterialRequest.
enum MaterialRequestType {
    NEW_MATERIALS     @map("MATERIAIS NOVOS") // This request is EXCLUSIVELY for new materials from the global catalog.
    DERIVED_MATERIALS @map("MATERIAIS DERIVADOS") // This request is EXCLUSIVELY for derived/repurposed materials.
}

// Defines the possible statuses for a MaterialRequest.
enum MaterialRequestStatusOptions {
    SIPAC_HANDLING     @map("GERENCIADA PELO SIPAC") // Status gerenciado pelo sipac
    REGISTERED         @map("CADASTRADA")
    PENDING            @map("PENDENTE DE AUTORIZACAO") // Request is pending approval.
    CHANGE_SPONSOR     @map("ALTERADA UNIDADE DE CUSTO")
    APPROVED           @map("AUTORIZADA") // Request has been approved.
    FORWARDED          @map("ENCAMINHADA")
    PARTIALLY_ATTENDED @map("PARCIALMENTE ATENDIDA") // Request has been partially fulfilled.
    FULLY_ATTENDED     @map("TOTALMENTE ATENDIDA") // Request has been fully fulfilled.
    REJECTED           @map("REJEITADA") // Request has been rejected.
    CANCELLED          @map("CANCELADA") // Request has been cancelled.
    REVERSED           @map("ESTORNADA") // Request has been reversed.
    MATERIAL_SENT      @map("MATERIAIS DESPACHADOS")
    MATERIAL_RECEIVED  @map("MATERIAIS RECEBIDOS")
    CHANGED            @map("ALTERADA") // Request has been changed (e.g., items modified).
    ITEM_RETURNED      @map("ITEM RETORNADO") // An item from the request has been returned.
    RETURNED           @map("RETORNADA") // The entire request has been returned.
}

// Stores the history of status changes for a MaterialRequest.
model MaterialRequestStatus {
    materialRequestId Int // Foreign key to the MaterialRequest.
    materialRequest   MaterialRequest              @relation(fields: [materialRequestId], references: [id], onDelete: Cascade) // Relation to the MaterialRequest model.
    status            MaterialRequestStatusOptions // The status set at this point in time.

    changedById Int? // User who made this status change (e.g., approver, requester for cancellation).
    changedBy   User? @relation("MaterialRequestStatusChangedBy", fields: [changedById], references: [id], onDelete: SetNull) // Relation to the User model.

    changeDate DateTime @default(now()) @db.Timestamp(0) // Timestamp for when this status was set.
    notes      String?  @db.Text // Notes related to this status change (e.g., approval notes, rejection reason).

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the history record was created.

    @@id([materialRequestId, status, changeDate])
    @@index([materialRequestId])
    @@index([status])
    @@index([changedById])
    @@map("material_request_statuses")
}

// Represents an individual item within a MaterialRequest.
model MaterialRequestItem {
    id Int @id @default(autoincrement()) // Unique identifier for the material request item.

    materialRequestId Int // Foreign key to the parent material request.
    materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id], onDelete: Cascade) // Relation to the MaterialRequest model.

    itemRequestType MaterialRequestItemType @default(GLOBAL_CATALOG) // Indicates the type of material being requested (global catalog or derived).

    // If MaterialRequest.requestType = NEW_MATERIALS, this item MUST reference a global catalog material.
    requestedGlobalMaterialId String? // Foreign key to the Material (global catalog).
    requestedGlobalMaterial   MaterialGlobalCatalog? @relation("RequestedGlobalMaterial", fields: [requestedGlobalMaterialId], references: [id]) // Relation to the Material model.

    // If MaterialRequest.requestType = DERIVED_MATERIALS, this item MUST describe the desired derived material.
    // Fulfillment Information (filled by warehouse staff)
    // If a specific instance was used to fulfill this item.
    fulfilledByInstanceId Int?
    fulfilledByInstance   MaterialDerived? @relation("FulfilledByInstance", fields: [fulfilledByInstanceId], references: [id], onDelete: SetNull) // Relation to the MaterialInstance model.
    // requestedDerivedName        String? // Name of the desired derived material.
    // requestedDerivedConditionId Int? // Desired condition for the derived material.
    // requestedDerivedCondition   MaterialInstanceCondition? @relation("RequestedDerivedCondition", fields: [requestedDerivedConditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

    quantityRequested Decimal  @db.Decimal(10, 3) // The quantity of material requested.
    quantityApproved  Decimal? @db.Decimal(10, 3) // The quantity approved by the manager.
    quantityDelivered Decimal  @default(0) @db.Decimal(10, 3) // The quantity effectively delivered.
    // unitOfMeasure     String // The unit of measure for the requested quantity.

    unitPrice Decimal? @db.Decimal(12, 2) // Valor unitário do item.

    notes String? @db.Text // Observations from the requester or warehouse staff for this item.

    stockMovements MaterialStockMovement[] // Stock movements that fulfilled this item.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    pickingOrders MaterialPickingOrder[]

    materialReceiptItems MaterialReceiptItem? //na modelagem eu não recebo itens fracionados, por isso a relação 1 para 1

    materialRestrictionOrderItems MaterialRestrictionOrderItem? @relation("RestrictionsForRequestItem")
    materialPickingOrderItems     MaterialPickingOrderItem[]
    materialWithdrawalsItems      MaterialWithdrawalItem[]      @relation("WithdrawalForRequestItem")

    @@unique([materialRequestId, requestedGlobalMaterialId])
    @@map("material_request_items") // Maps this model to the 'material_request_items' table.
}

// Defines the type of material requested within a MaterialRequestItem.
enum MaterialRequestItemType {
    GLOBAL_CATALOG   @map("CATALOGO GLOBAL") // Request for a new/standard item from the global catalog.
    DERIVED_MATERIAL @map("MATERIAL DERIVADO") // Request for a derived material (e.g., leftover, processed).

    @@map("material_request_item_types")
}

// Defines different types of stock movements, offering more flexibility than an enum.
model MaterialStockMovementType {
    id          Int                           @id @default(autoincrement()) // Unique identifier for the stock movement type.
    code        MaterialStockOperationSubType @unique // Short code for the type (e.g., "ENTRY_PURCHASE", "EXIT_USAGE").
    name        String // User-friendly name (e.g., "Entry from Purchase", "Exit for Usage").
    description String?                       @db.Text // Detailed description of the movement type.
    operation   MaterialStockOperationType // Defines if it's an IN (increase), OUT (decrease), or ADJUSTMENT.
    isActive    Boolean                       @default(true) // Indicates if the movement type is active.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Relation
    stockMovements      MaterialStockMovement[] // Stock movements associated with this type.
    materialWithdrawals MaterialWithdrawal[]
    materialReceipts    MaterialReceipt[]

    @@map("material_stock_movement_types") // Maps this model to the 'stock_movement_types' table.
}

// Classifies the general operation of a StockMovementType.
enum MaterialStockOperationType {
    IN          @map("ENTRADA") // Represents an increase in stock (e.g., purchase, return).
    OUT         @map("SAIDA") // Represents a decrease in stock (e.g., usage, disposal).
    ADJUSTMENT  @map("AJUSTE") // Represents an adjustment that could be positive or negative (e.g., stock count).
    RESERVATION @map("RESERVA") // Represents a change in reserved quantity, not physical stock.
    RESTRICTION @map("RESTRICAO") // Represents a change in restricted quantity, not physical stock.
}

/// Enum para os subtipos de operações de movimentação de estoque de material.
/// Mapeia o código em inglês (padrão do sistema) para o código em português (usado no banco de dados).
enum MaterialStockOperationSubType {
    // --- 1. Operação: IN (ENTRADA) ---
    IN_CENTRAL           @map("ENTRADA_CENTRAL") // Entrada por Transferência da Central
    IN_PURCHASE          @map("ENTRADA_COMPRA") // Entrada por Compra
    IN_DONATION          @map("ENTRADA_DOACAO") // Entrada por Doação (Recebida)
    IN_TRANSFER          @map("ENTRADA_TRANSFERENCIA") // Entrada por Transferência (Recebida)
    IN_SERVICE_SURPLUS   @map("ENTRADA_SOBRA_SERVICO") // Entrada por Sobra de Serviço
    IN_RETURN_FROM_ISSUE @map("ENTRADA_DEVOLUCAO_SAIDA") // Entrada por Devolução (Saída Revertida)
    INITIAL_STOCK_LOAD   @map("CARGA_INICIAL_ESTOQUE") // Carga Inicial de Estoque
    IN_LOAN_RETURN       @map("ENTRADA_DEVOLUCAO_EMPRESTIMO") // Entrada por Devolução de Empréstimo

    // --- 2. Operação: OUT (SAIDA) ---
    OUT_SERVICE_USAGE     @map("SAIDA_USO_SERVICO") // Saída para Uso em Serviço
    OUT_EMERGENCY_USAGE   @map("SAIDA_USO_EMERGENCIA") // Saída de Emergência para Serviço
    OUT_CENTRAL           @map("SAIDA_CENTRAL") // Saída por Transferência para Central
    OUT_TRANSFER          @map("SAIDA_TRANSFERENCIA") // Saída por Transferência (Despachada)
    OUT_DISPOSAL_DAMAGE   @map("SAIDA_DESCARTE_DANO") // Saída por Descarte (Danificado)
    OUT_DISPOSAL_OBSOLETE @map("SAIDA_DESCARTE_OBSOLETO") // Saída por Descarte (Obsoleto)
    OUT_EXPIRATION        @map("SAIDA_VENCIMENTO") // Saída por Vencimento
    OUT_DONATION          @map("SAIDA_DOACAO") // Saída por Doação (Realizada)
    OUT_LOSS              @map("SAIDA_PERDA_ROUBO") // Saída por Perda/Roubo
    OUT_PROCESSING        @map("SAIDA_BENEFICIAMENTO") // Saída para beneficiamento
    OUT_LOAN              @map("SAIDA_EMPRESTIMO") // Saída por Empréstimo

    // --- 3. Operação: ADJUSTMENT (AJUSTE) ---
    ADJUSTMENT_INV_IN         @map("AJUSTE_INVENTARIO_ENTRADA") // Ajuste de Inventário (Positivo)
    ADJUSTMENT_INV_OUT        @map("AJUSTE_INVENTARIO_SAIDA") // Ajuste de Inventário (Negativo)
    ADJUSTMENT_RECLASSIFY_IN  @map("AJUSTE_RECLASSIFICACAO_ENTRADA") // Ajuste por Reclassificação (Entrada)
    ADJUSTMENT_RECLASSIFY_OUT @map("AJUSTE_RECLASSIFICACAO_SAIDA") // Ajuste por Reclassificação (Saída)

    // --- 4. Operação: RESERVATION (RESERVA) ---
    RESERVE_FOR_PICKING_ORDER    @map("RESERVA_ORDEM_SEPARACAO") // Reserva para Ordem de Separação
    RELEASE_PICKING_RESERVATION  @map("LIBERACAO_RESERVA_SEPARACAO") // Liberação de Reserva (Ordem de Separação)
    RESERVE_FOR_SPECIFIC_DEMAND  @map("RESERVA_DEMANDA_ESPECIFICA") // Reserva para Demanda Específica
    RELEASE_SPECIFIC_RESERVATION @map("LIBERACAO_RESERVA_ESPECIFICA") // Liberação de Reserva (Demanda Específica)

    // --- 5. Operação: RESTRICTION (RESTRICAO) ---
    RESTRICT_FOR_PAID_ITEM   @map("RESTRICAO_ITEM_PAGO") // Restrição para Item Pago
    RELEASE_PAID_RESTRICTION @map("LIBERACAO_RESTRICAO_PAGA") // Liberação de Restrição (Item Pago)
}

// Records individual material stock transactions (log of all movements).
model MaterialStockMovement {
    id Int @id @default(autoincrement()) // Unique identifier for the stock movement.

    warehouseId Int // Foreign key to the warehouse where the movement occurred.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    // The global material type involved, if applicable.
    globalMaterialId String?
    globalMaterial   MaterialGlobalCatalog? @relation("GlobalMaterialMovements", fields: [globalMaterialId], references: [id], onDelete: Restrict) // Relation to the Material model.

    // The specific material instance involved, if applicable.
    materialInstanceId Int?
    materialInstance   MaterialDerived? @relation("InstanceStockMovements", fields: [materialInstanceId], references: [id], onDelete: Restrict) // Relation to the MaterialInstance model.

    movementTypeId Int // Foreign key to the type of stock movement.
    movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id]) // Relation to the StockMovementType model.

    quantity     Decimal  @db.Decimal(12, 2) // Quantity of material moved in the unit of the instance or global material.
    // unitOfMeasure String // Unit of measure for the movement.
    movementDate DateTime @default(now()) @db.Timestamp(0) // The date and time of the movement.
    unitPrice    Decimal? @db.Decimal(12, 2) // Valor unitário do item.

    createdAt DateTime @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt DateTime @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.

    // Usuário do almoxarifado que processou a saída
    processedByUserId Int? // Renomeado de userId para clareza, ou pode ser o almoxarife logado
    processedByUser   User? @relation("StockMovementsProcessedByUser", fields: [processedByUserId], references: [id], onDelete: SetNull)

    // Usuário que EFETIVAMENTE RETIROU o material
    collectedByUserId Int? // Pode ser diferente do solicitante ou do técnico da OS
    collectedByUser   User? @relation("StockMovementsCollectedByUser", fields: [collectedByUserId], references: [id], onDelete: SetNull)

    // // Worker que EFETIVAMENTE RETIROU o material
    collectedByWorkerId Int?
    collectedByWorker   Worker? @relation("StockMovementsCollectedByWorker", fields: [collectedByWorkerId], references: [id], onDelete: SetNull)

    warehouseMaterialStock   MaterialWarehouseStock? @relation(fields: [warehouseMaterialStockId], references: [id]) // Relation to WarehouseMaterialStock.
    warehouseMaterialStockId Int? // Foreign key to WarehouseMaterialStock.
    materialRequestItem      MaterialRequestItem?    @relation(fields: [materialRequestItemId], references: [id]) // Relation to MaterialRequestItem.
    materialRequestItemId    Int? // Foreign key to MaterialRequestItem.

    maintenanceRequestId Int? // Para vincular saídas de emergência diretamente à OS
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

    // Referências de origem da movimentação (apenas UMA delas será preenchida)
    materialWithdrawalItemId Int?                    @unique // Se originado por um item de uma retirada efetiva
    materialWithdrawalItem   MaterialWithdrawalItem? @relation(fields: [materialWithdrawalItemId], references: [id]) // onDelete:SetNull ou Cascade? Se o item da retirada for deletado, o movimento deve sumir? Melhor SetNull e tratar.

    materialRestrictionItemId Int?
    materialRestrictionItem   MaterialRestrictionOrderItem? @relation(fields: [materialRestrictionItemId], references: [id])

    materialReceiptItemId Int?                 @unique
    materialReceiptItem   MaterialReceiptItem? @relation(fields: [materialReceiptItemId], references: [id], onDelete: SetNull)

    stockTransferOrderItemId Int?                       @unique
    stockTransferOrderItem   MaterialTransferOrderItem? @relation(fields: [stockTransferOrderItemId], references: [id], onDelete: SetNull)

    @@index([globalMaterialId]) // Index for faster lookups by global material.
    @@index([materialInstanceId]) // Index for faster lookups by material instance.
    @@map("material_stock_movements") // Maps this model to the 'material_stock_movements' table.
}

// Defines the possible states or conditions of a derived/used material instance.
model MaterialDerivedCondition {
    id               Int               @id @default(autoincrement()) // Unique identifier for the material instance condition.
    code             String            @unique // Short code for the condition (e.g., "GOOD", "DAMAGED").
    name             String // User-friendly name of the condition.
    description      String?           @db.Text // Detailed description of the condition.
    isUsable         Boolean           @default(true) // Indicates if materials in this condition are generally usable.
    createdAt        DateTime          @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt        DateTime          @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
    materialsDerived MaterialDerived[] // Material instances with this condition.

    @@map("material_derived_conditions") // Maps this model to the 'material_instance_conditions' table.
}

// Represents a specific instance or batch of a material, especially derived or with a specific state.
model MaterialDerived {
    id                Int    @id @default(autoincrement()) // Unique identifier for the material instance.
    derivedIdentifier String @unique @default(uuid()) // Unique identifier for this specific instance/batch. @map("instanceIdentifier")

    // Optional link to the global material catalog.
    // Filled if this instance is a leftover/processed version of a known global item.
    // Null if it's a new item generated locally without a global counterpart.
    globalMaterialId String?
    globalMaterial   MaterialGlobalCatalog? @relation("GlobalMaterialLink", fields: [globalMaterialId], references: [id], onDelete: SetNull) // Relation to the Material model.

    // Specific description of the instance (especially if globalMaterialId is null).
    derivedName          String // Specific name of this derived instance/type (e.g., "Cut Steel Plate 30x50cm").
    derivedDescription   String? @db.Text // Detailed description of the derived material.
    derivedUnitOfMeasure String // Unit of measure for THIS instance (may differ from globalMaterial).

    warehouseId Int // Foreign key to the warehouse where this instance is stored.
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade) // Relation to the Warehouse model.

    conditionId Int // Foreign key to the condition of this material instance.
    condition   MaterialDerivedCondition @relation(fields: [conditionId], references: [id]) // Relation to the MaterialInstanceCondition model.

    quantity            Decimal @db.Decimal(12, 2) // Current quantity of this instance.
    locationInWarehouse String? // Specific location within the warehouse for this instance.

    sourceNotes String? @db.Text // Notes about the origin of this instance (e.g., "Leftover from WO-123").

    // Reserved/Restricted balance SPECIFIC to this instance.
    reservedQuantity   Decimal @default(0) @db.Decimal(12, 2) // Quantity reserved for specific demands.
    restrictedQuantity Decimal @default(0) @db.Decimal(12, 2) // Quantity restricted for specific, paid-for requests.

    // Relations
    stockMovements        MaterialStockMovement[] @relation("InstanceStockMovements") // Stock movements related to this instance.
    fulfilledRequestItems MaterialRequestItem[]   @relation("FulfilledByInstance") // Material request items fulfilled by this specific instance.

    createdAt                    DateTime                       @default(now()) @db.Timestamp(0) // Timestamp for when the record was created.
    updatedAt                    DateTime                       @updatedAt @db.Timestamp(0) // Timestamp for the last update of the record.
    StockTransferOrderItem       MaterialTransferOrderItem[]
    MaterialWithdrawalItem       MaterialWithdrawalItem[]
    MaterialRestrictionOrderItem MaterialRestrictionOrderItem[]

    @@index([globalMaterialId]) // Index for faster lookups by global material.
    @@index([warehouseId]) // Index for faster lookups by warehouse.
    @@index([conditionId]) // Index for faster lookups by condition.
    @@index([derivedName]) // Index for searching by derived name.
    @@map("material_derived") // Maps this model to the 'material_instances' table.
}

// --- Material Picking Order (Cabeçalho da Ordem de Separação/Reserva de Material) ---
// Solicitação para o almoxarifado separar e/O reservar materiais para uma retirada futura.
model MaterialPickingOrder {
    id                 Int    @id @default(autoincrement())
    pickingOrderNumber String @unique @default(uuid()) // Protocolo da ordem de separação

    // Para qual MaterialRequest esta ordem de separação se destina
    materialRequestId Int
    materialRequest   MaterialRequest @relation(fields: [materialRequestId], references: [id])

    // Almoxarifado que deve separar os materiais
    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    // Usuário que solicitou a separação (geralmente o técnico ou planejador)
    requestedByUserId Int
    requestedByUser   User     @relation("PickingOrdersRequestedBy", fields: [requestedByUserId], references: [id])
    requestedAt       DateTime @default(now())

    // Usuário que EFETIVAMENTE coletará o conjunto de materiais
    beCollectedByUserId Int?
    beCollectedByUser   User? @relation("PickingOrdersBeCollectedByUser", fields: [beCollectedByUserId], references: [id])

    // trabalhador que EFETIVAMENTE coletará o conjunto de materiais
    beCollectedByWorkerId Int?
    beCollectedByWorker   Worker? @relation("PickingOrdersBeCollectedByWorker", fields: [beCollectedByWorkerId], references: [id])

    // Data desejada para retirada (opcional)
    desiredPickupDate DateTime?

    status MaterialPickingOrderStatus @default(PENDING_PREPARATION)
    // PENDENTE_PREPARACAO, EM_PREPARACAO, PRONTO_PARA_RETIRADA, PARCIALMENTE_RETIRADO, TOTALMENTE_RETIRADO, CANCELADO

    notes String? @db.Text // Instruções para o almoxarifado

    items MaterialPickingOrderItem[] // Itens a serem separados/reservados

    // Relação com as retiradas efetivas que atenderam esta ordem de separação
    materialWithdrawals MaterialWithdrawal[]

    createdAt             DateTime             @default(now()) @db.Timestamp(0)
    updatedAt             DateTime             @updatedAt @db.Timestamp(0)
    MaterialRequestItem   MaterialRequestItem? @relation(fields: [materialRequestItemId], references: [id])
    materialRequestItemId Int?

    @@index([materialRequestId])
    @@index([warehouseId])
    @@index([requestedByUserId])
    @@index([status])
    @@map("material_picking_orders")
}

enum MaterialPickingOrderStatus {
    PENDING_PREPARATION @map("PENDENTE PREPARACAO") // Aguardando almoxarifado iniciar a separação/reserva
    IN_PREPARATION      @map("EM PREPARACAO") // Almoxarifado está separando/reservando os itens
    READY_FOR_PICKUP    @map("PRONTO PARA RETIRADA") // Pronto para retirada
    // Materiais separados/reservados, aguardando retirada
    PARTIALLY_WITHDRAWN @map("PARCIALMENTE RETIRADO") // Parte dos itens desta ordem já foi retirada
    FULLY_WITHDRAWN     @map("TOTALMENTE RETIRADO") // Todos os itens desta ordem foram retirados
    CANCELLED           @map("CANCELADO") // Ordem de separação cancelada
    EXPIRED             @map("VENCIDA") // Ordem de separação vencida
}

// --- Material Picking Order Item (Detalhe da Ordem de Separação/Reserva) ---
// Cada material e quantidade a ser separado/reservado.
model MaterialPickingOrderItem {
    id Int @id @default(autoincrement())

    materialPickingOrderId Int
    materialPickingOrder   MaterialPickingOrder @relation(fields: [materialPickingOrderId], references: [id], onDelete: Cascade)

    // Referência ao item da Requisição de Material original
    materialRequestItemId Int
    materialRequestItem   MaterialRequestItem @relation(fields: [materialRequestItemId], references: [id])

    // O material específico a ser separado (redundante se já está no materialRequestItem, mas útil para resumo)
    // globalMaterialId     Int?
    // globalMaterial       Material? @relation(fields: [globalMaterialId], references: [id])
    // materialInstanceId   Int?
    // materialInstance     MaterialInstance? @relation(fields: [materialInstanceId], references: [id])

    quantityToPick Decimal @db.Decimal(10, 3) // Quantidade a ser separada/reservada para este item
    // unitOfMeasure  String // Unidade de medida

    // Informações preenchidas pelo almoxarifado durante a preparação
    quantityPicked Decimal? @db.Decimal(10, 3) // Quantidade efetivamente separada/reservada
    // pickedFromInstanceId Int? // Se uma instância específica foi alocada durante o picking
    // pickedFromInstance   MaterialInstance? @relation(fields: [pickedFromInstanceId], references: [id])
    // notes                String? // Notas específicas do almoxarife sobre este item do picking

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([materialPickingOrderId])
    @@index([materialRequestItemId])
    @@map("material_picking_order_items")
}

// --- Material Withdrawal (Cabeçalho da Retirada Efetiva de Materiais) ---
// Representa um único evento de retirada física de um conjunto de materiais.
model MaterialWithdrawal {
    id               Int    @id @default(autoincrement())
    withdrawalNumber String @unique @default(uuid()) // Protocolo da retirada

    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    // Usuário do almoxarifado que processou a saída no sistema
    processedByUserId Int
    processedByUser   User @relation("WithdrawalsProcessedBy", fields: [processedByUserId], references: [id])

    // Usuário que EFETIVAMENTE RETIROU o conjunto de materiais
    collectedByUserId Int?
    collectedByUser   User? @relation("WithdrawalsCollectedByUser", fields: [collectedByUserId], references: [id])

    // Trabalhador que EFETIVAMENTE RETIROU o conjunto de materiais
    collectedByWorkerId Int?
    collectedByWorker   Worker? @relation("WithdrawalsCollectedByWorker", fields: [collectedByWorkerId], references: [id])

    withdrawalDate DateTime @default(now()) // Data e hora da retirada

    // Referência à demanda principal que motivou esta retirada
    maintenanceRequestId Int?
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

    materialRequestId Int? // A MaterialRequest GERAL que está sendo atendida
    materialRequest   MaterialRequest? @relation(fields: [materialRequestId], references: [id], onDelete: SetNull)

    // Se esta retirada foi originada por uma Ordem de Separação/Reserva específica
    materialPickingOrderId Int?
    materialPickingOrder   MaterialPickingOrder? @relation(fields: [materialPickingOrderId], references: [id], onDelete: SetNull)

    // Tipo geral da movimentação para este "pacote" (ex: SAIDA_USO_OS, SAIDA_EMERGENCIA)
    movementTypeId Int
    movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id])

    notes String? @db.Text

    items MaterialWithdrawalItem[] // Os materiais que compõem esta retirada

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([warehouseId])
    @@index([processedByUserId])
    @@index([collectedByUserId])
    @@index([withdrawalDate])
    @@index([maintenanceRequestId])
    @@index([materialRequestId])
    @@index([materialPickingOrderId])
    @@index([movementTypeId])
    @@map("material_withdrawals")
}

// --- Material Withdrawal Item (Detalhe da Retirada Efetiva) ---
// Cada material e quantidade que compôs uma MaterialWithdrawal.
model MaterialWithdrawalItem {
    id Int @id @default(autoincrement())

    materialWithdrawalId Int
    materialWithdrawal   MaterialWithdrawal @relation(fields: [materialWithdrawalId], references: [id], onDelete: Cascade)

    // O material específico que foi retirado
    globalMaterialId   String?
    globalMaterial     MaterialGlobalCatalog? @relation(fields: [globalMaterialId], references: [id], onDelete: Restrict)
    materialInstanceId Int?
    materialInstance   MaterialDerived?       @relation(fields: [materialInstanceId], references: [id], onDelete: Restrict)

    quantityWithdrawn Decimal @db.Decimal(12, 2)
    // unitOfMeasure     String

    // Se este item está atendendo um MaterialRequestItem específico
    // Este link é crucial para atualizar o status da demanda original.
    materialRequestItemId Int?
    materialRequestItem   MaterialRequestItem? @relation("WithdrawalForRequestItem", fields: [materialRequestItemId], references: [id], onDelete: SetNull)

    // O MaterialStockMovement é gerado por este MaterialWithdrawalItem.
    // Cada MaterialWithdrawalItem RESULTA em UM MaterialStockMovement de SAÍDA.
    stockMovement MaterialStockMovement?

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([materialWithdrawalId])
    @@index([globalMaterialId])
    @@index([materialInstanceId])
    @@index([materialRequestItemId])
    @@map("material_withdrawal_items")
}

// --- Stock Transfer Order (Cabeçalho da Ordem de Transferência) ---
model MaterialTransferOrder {
    id                  Int    @id @default(autoincrement())
    transferOrderNumber String @unique @default(uuid()) // Protocolo da transferência

    originWarehouseId Int
    originWarehouse   Warehouse @relation("TransfersFromWarehouse", fields: [originWarehouseId], references: [id])

    destinationWarehouseId Int
    destinationWarehouse   Warehouse @relation("TransfersToWarehouse", fields: [destinationWarehouseId], references: [id])

    status MaterialTransferStatus @default(PENDING_APPROVAL) // PENDENTE_APROVACAO, APROVADA, EM_TRANSITO, RECEBIDA_PARCIAL, RECEBIDA_TOTAL, CANCELADA

    requestedByUserId Int
    requestedByUser   User     @relation("TransferOrdersRequestedBy", fields: [requestedByUserId], references: [id])
    requestedAt       DateTime @default(now())

    // Quem aprovou a transferência (pode ser gerente do almox. origem ou um centralizador)
    approvedByUserId Int?
    approvedByUser   User?     @relation("TransferOrdersApprovedBy", fields: [approvedByUserId], references: [id])
    approvedAt       DateTime?

    // Quem despachou do almoxarifado de origem
    shippedByUserId Int?
    shippedByUser   User?     @relation("TransferOrdersShippedBy", fields: [shippedByUserId], references: [id])
    shippedAt       DateTime?

    // Quem recebeu no almoxarifado de destino
    receivedByUserId Int?
    receivedByUser   User?     @relation("TransferOrdersReceivedBy", fields: [receivedByUserId], references: [id])
    receivedAt       DateTime? // Data do último recebimento

    notes String? @db.Text
    // Pode estar vinculada a uma MaterialRequest original que disparou a necessidade de transferência
    // sourceMaterialRequestId Int?
    // sourceMaterialRequest   MaterialRequest? @relation(fields: [sourceMaterialRequestId], references: [id])

    items MaterialTransferOrderItem[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([originWarehouseId])
    @@index([destinationWarehouseId])
    @@index([status])
    @@map("material_transfer_orders")
}

enum MaterialTransferStatus {
    PENDING_APPROVAL   @map("PENDENTE APROVACAO") // Aguardando aprovação para a transferência
    APPROVED           @map("APROVADA") // Aprovada, aguardando despacho do almoxarifado de origem
    REJECTED           @map("REJEITADA") // Transferência Rejeitada
    PENDING_SHIPMENT   @map("PENDENTE DESPACHO") // Aprovada, aguardando o almoxarifado de origem separar e despachar
    IN_TRANSIT         @map("EM TRANSITO") // Materiais despachados, aguardando recebimento no destino
    PARTIALLY_RECEIVED @map("PARCIALMENTE RECEBIDA") // Parte dos materiais recebida no destino
    FULLY_RECEIVED     @map("TOTALMENTE RECEBIDA") // Todos os materiais recebidos no destino
    CANCELLED          @map("CANCELADA") // Transferência cancelada
}

// --- Stock Transfer Order Item (Itens da Ordem de Transferência) ---
model MaterialTransferOrderItem {
    id Int @id @default(autoincrement())

    materialTransferOrderId Int
    materialTransferOrder   MaterialTransferOrder @relation(fields: [materialTransferOrderId], references: [id], onDelete: Cascade)

    // O que está sendo transferido:
    // Pode ser um material NOVO do catálogo global
    materialId String?
    material   MaterialGlobalCatalog? @relation(fields: [materialId], references: [id])

    // OU uma INSTÂNCIA ESPECÍFICA de material
    materialInstanceId Int?
    materialInstance   MaterialDerived? @relation(fields: [materialInstanceId], references: [id])
    // Validação: Ou materialId ou materialInstanceId deve ser preenchido

    quantityRequested Decimal @db.Decimal(10, 3)
    // unitOfMeasure     String // Unidade da solicitação/transferência

    // Preenchido pelo almoxarifado de ORIGEM
    quantityShipped Decimal? @db.Decimal(10, 3) // Quantidade efetivamente despachada

    // Preenchido pelo almoxarifado de DESTINO
    quantityReceived Decimal @default(0) @db.Decimal(10, 3) // Quantidade efetivamente recebida até o momento

    // Rastreamento de movimentações de estoque ligadas a este item de transferência
    // (uma de SAÍDA na origem, uma de ENTRADA no destino)
    stockMovements MaterialStockMovement[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("material_transfer_order_items")
}

// --- Material Receipt (Registro de Recebimento de Materiais Externos) ---
model MaterialReceipt {
    id                Int      @id @default(autoincrement())
    receiptNumber     String   @unique @default(uuid()) // Protocolo interno do recebimento
    externalReference String? // Número da Nota Fiscal, documento de doação, etc.
    receiptDate       DateTime @default(now()) @db.Timestamp(0)

    movementTypeId Int // Foreign key to the type of stock movement for this receipt.
    movementType   MaterialStockMovementType @relation(fields: [movementTypeId], references: [id])

    sourceName String? // Nome do Fornecedor, Doador, ou outra descrição da origem

    destinationWarehouseId Int
    destinationWarehouse   Warehouse @relation("ReceiptsAtWarehouse", fields: [destinationWarehouseId], references: [id])

    processedByUserId Int // Usuário que processou o recebimento
    processedByUser   User @relation("ReceiptsProcessedBy", fields: [processedByUserId], references: [id])

    materialRequestId Int?             @unique
    materialRequest   MaterialRequest? @relation("ReceiptsForMaterialRequest", fields: [materialRequestId], references: [id])

    status MaterialReceiptStatus @default(FULLY_ACCEPTED)

    notes String? @db.Text

    items MaterialReceiptItem[] // Itens recebidos

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([destinationWarehouseId])
    @@index([receiptDate])
    @@index([movementTypeId]) // Updated index to use movementTypeId
    @@map("material_receipts") // Novo nome da tabela
}

enum MaterialReceiptStatus {
    PENDING_INSPECTION @map("PENDENTE INSPEÇÃO")
    PARTIALLY_ACCEPTED @map("PARCIALMENTE ACEITO")
    FULLY_ACCEPTED     @map("TOTALMENTE ACEITO")
    REJECTED_TOTAL     @map("TOTALMENTE REJEITADO")
    CANCELLED          @map("CANCELADO")
}

// --- Material Receipt Item (Itens do Recebimento de Material) ---
model MaterialReceiptItem {
    id Int @id @default(autoincrement())

    materialReceiptId Int
    materialReceipt   MaterialReceipt @relation(fields: [materialReceiptId], references: [id], onDelete: Cascade)

    materialId String
    material   MaterialGlobalCatalog @relation(fields: [materialId], references: [id])

    quantityExpected Decimal @db.Decimal(10, 3)
    // unitOfMeasure    String

    quantityReceived Decimal @db.Decimal(10, 3)
    quantityAccepted Decimal @db.Decimal(10, 3)
    quantityRejected Decimal @db.Decimal(10, 3)
    rejectionReason  String? @db.Text

    batchNumber    String?
    expirationDate DateTime?
    unitPrice      Decimal?  @db.Decimal(12, 4)

    materialStockMovement MaterialStockMovement?

    materialRequestItem   MaterialRequestItem? @relation(fields: [materialRequestItemId], references: [id]) // Relation to MaterialRequestItem.
    materialRequestItemId Int?                 @unique // //na modelagem eu não recebo itens fracionados, por isso a relação 1 para 1

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("material_receipt_items") // Novo nome da tabela
}

// --- Material Restriction Order (Cabeçalho) ---
model MaterialRestrictionOrder {
    id                     Int    @id @default(autoincrement())
    restrictionOrderNumber String @unique @default(uuid())

    warehouseId Int
    warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

    // operationType RestrictionOperationType

    processedByUserId Int
    processedByUser   User     @relation("RestrictionOrdersProcessedBy", fields: [processedByUserId], references: [id])
    processedAt       DateTime @default(now())

    // Se a ordem de restrição como um todo está relacionada a UMA MaterialRequest específica
    // (Isso é útil se todos os itens da restrição são para a mesma MaterialRequest)
    targetMaterialRequestId Int              @unique
    targetMaterialRequest   MaterialRequest? @relation("RestrictionsForMaterialRequest", fields: [targetMaterialRequestId], references: [id])

    status RestrictionOrderStatus?
    notes  String?                 @db.Text

    items MaterialRestrictionOrderItem[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([targetMaterialRequestId]) // Novo índice
    @@map("material_restriction_orders")
}

enum RestrictionOperationType {
    RESTRICT_FOR_PAID_ITEM   @map("RESTRICAO_ITEM_PAGO") // Marcar materiais como restritos
    RELEASE_PAID_RESTRICTION @map("LIBERACAO_RESTRICAO_PAGA") // Liberar materiais que estavam restritos
}

enum RestrictionOrderStatus {
    PARTIALLY_RESTRICTED @map("PARCIALMENTE RESTRITA")
    FULLY_RESTRICTED     @map("TOTALMENTE RESTRITA")
    FREE                 @map("LIBERADA")
}

// --- Material Restriction Order Item (Detalhe da Ordem de Restrição/Liberação) ---
model MaterialRestrictionOrderItem {
    id Int @id @default(autoincrement())

    materialRestrictionOrderId Int
    materialRestrictionOrder   MaterialRestrictionOrder @relation(fields: [materialRestrictionOrderId], references: [id])

    // O material específico a ser restringido/liberado
    globalMaterialId   String?
    globalMaterial     MaterialGlobalCatalog? @relation(fields: [globalMaterialId], references: [id])
    materialInstanceId Int?
    materialInstance   MaterialDerived?       @relation(fields: [materialInstanceId], references: [id])

    quantityRequested  Decimal @db.Decimal(12, 2)
    quantityRestricted Decimal @db.Decimal(12, 2)
    // unitOfMeasure String

    // *** RELAÇÃO CRUCIAL ADICIONADA/REFORÇADA ***
    // Para qual MaterialRequestItem esta restrição/liberação específica se aplica.
    // Isso é essencial se a restrição é porque o material foi "comprado para" ou "alocado para" este item de demanda.
    targetMaterialRequestItemId Int                  @unique // Tornar opcional se uma restrição puder existir sem um item de requisição direto (ex: reserva estratégica)
    targetMaterialRequestItem   MaterialRequestItem? @relation("RestrictionsForRequestItem", fields: [targetMaterialRequestItemId], references: [id])

    stockMovement MaterialStockMovement[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([targetMaterialRequestItemId]) // Novo índice
    @@map("material_restriction_order_items")
}
