model Worker {
    id Int @id @default(autoincrement())

    name      String
    email     String?
    birthdate DateTime? @db.Date
    urlPhoto  String?   @unique @db.VarChar(255)
    rg        String?   @unique @db.VarChar(11)
    cpf       String?   @unique @db.VarChar(14)
    phone     String?   @db.VarChar(11)
    isActive  Boolean   @default(true) // Indicates if the worker is active.
    notes     String?

    workerContracts WorkerContract[]

    // Define qual instancia de manutencao vai fazer o gerenciamento desse trabalhador
    maintenanceInstance   MaintenanceInstance? @relation(fields: [maintenanceInstanceId], references: [id])
    maintenanceInstanceId Int?

    // Relations: material.prisma (for MaterialPickingOrder)
    pickingOrdersBeCollected MaterialPickingOrder[] @relation("PickingOrdersBeCollectedByWorker") // Material picking orders to be collected by this worker.

    // Relations: material.prisma (for MaterialWithdrawal)
    withdrawalsCollected MaterialWithdrawal[] @relation("WithdrawalsCollectedByWorker") // Material picking orders to be collected by this worker.

    // --- NOVAS RELAÇÕES ---
    ledTeam                         WorkerTeam?                         @relation("TeamLeader")
    teams                           WorkerTeam[]                        @relation("TeamMembers")
    workAllocations                 MaintenanceServiceOrderAllocation[]
    // ----------------------
    materialStockMovementsCollected MaterialStockMovement[]             @relation("StockMovementsCollectedByWorker")

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("workers")
}

// Representa uma equipe de trabalho (Elétrica, Alvenaria, etc.).
model WorkerTeam {
    id          Int     @id @default(autoincrement())
    name        String  @unique
    description String?
    isActive    Boolean @default(true)

    // --- MUDANÇA AQUI ---
    // Relação com a especialidade da equipe.
    specialtyId Int
    specialty   WorkerSpecialty @relation(fields: [specialtyId], references: [id])
    // --------------------

    // --- MUDANÇA AQUI ---
    // Líder geral da equipe
    leaderId Int?    @unique // Uma pessoa pode liderar apenas uma equipe
    leader   Worker? @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: SetNull)
    // --------------------

    members       Worker[]                  @relation("TeamMembers") // Relação para membros
    serviceOrders MaintenanceServiceOrder[] // OS atribuídas a esta equipe

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@map("workers_teams")
}

// Define as especialidades ou ofícios das equipes de manutenção.
model WorkerSpecialty {
    id          Int     @id @default(autoincrement())
    name        String  @unique // Ex: "Eletricista", "Pedreiro", "Pintor"
    description String?

    // Relações
    teams WorkerTeam[] // Todas as equipes que possuem esta especialidade.

    createdAt       DateTime         @default(now()) @db.Timestamp(0)
    updatedAt       DateTime         @updatedAt @db.Timestamp(0)
    workerContracts WorkerContract[]

    @@map("workers_specialties")
}

model WorkerContract {
    id                  Int       @id @default(autoincrement())
    workerId            Int
    contractId          Int
    workerSpecialtyId   Int
    sipacUnitLocationId Int
    startDate           DateTime? @db.Date
    endDate             DateTime? @db.Date
    // located             String?   @db.VarChar(255)
    notes               String?   @db.Text
    // workerContractDangerId    Int?n
    // workerContractRegimeId    Int?
    // workerContractUnhealthyId Int?
    // acting              String?   @db.VarChar(255)

    // workers_contracts_dangers     workers_contracts_dangers?     @relation(fields: [worker_contract_danger_id], references: [id])
    // workers_contracts_regimes     workers_contracts_regimes?     @relation(fields: [worker_contract_regime_id], references: [id])
    // workers_contracts_unhealthies workers_contracts_unhealthies? @relation(fields: [worker_contract_unhealthy_id], references: [id])

    worker          Worker          @relation(fields: [workerId], references: [id])
    contract        Contract        @relation(fields: [contractId], references: [id])
    workerSpecialty WorkerSpecialty @relation(fields: [workerSpecialtyId], references: [id])

    //unidades
    sipacUnitLocation SipacUnidade @relation("unidadeLocalizacaoWorkerContract", fields: [sipacUnitLocationId], references: [id])

    @@unique([workerId, contractId, workerSpecialtyId])
    @@index([contractId])
    @@index([workerSpecialtyId])
    @@index([sipacUnitLocationId])
    // @@index([worker_contract_danger_id])
    // @@index([worker_contract_regime_id])
    // @@index([worker_contract_unhealthy_id])
    @@map("workers_contracts")
}
