// =================================================================
// ==              MODELS PARA ATIVOS DE INFRAESTRUTURA           ==
// =================================================================

model Building {
    id                  Int                        @id @default(autoincrement())
    name                String
    code                String?                    @unique
    address             String?
    createdAt           DateTime                   @default(now())
    updatedAt           DateTime                   @updatedAt
    spaces              Space[]
    systems             InfrastructureSystem[]
    maintenanceRequests MaintenanceRequest[]
    infraOccurrences    InfrastructureOccurrence[]

    @@map("buildings")
}

// Modelo SpaceType, agora como um modelo para flexibilidade.
model SpaceType {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    icon        String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    spaces      Space[]

    @@map("space_types")
}

model Space {
    id                  Int                        @id @default(autoincrement())
    name                String
    floor               String?
    description         String?                    @db.Text
    spaceTypeId         Int
    spaceType           SpaceType                  @relation(fields: [spaceTypeId], references: [id], onDelete: Restrict)
    buildingId          Int
    building            Building                   @relation(fields: [buildingId], references: [id], onDelete: Cascade)
    parentId            Int?
    parent              Space?                     @relation("NestedSpaces", fields: [parentId], references: [id], onDelete: NoAction)
    children            Space[]                    @relation("NestedSpaces")
    maintenanceRequests MaintenanceRequest[]
    infraOccurrences    InfrastructureOccurrence[]
    createdAt           DateTime                   @default(now())
    updatedAt           DateTime                   @updatedAt

    @@index([buildingId])
    @@index([parentId])
    @@index([spaceTypeId])
    @@map("spaces")
}

model InfrastructureSystem {
    id                  Int                  @id @default(autoincrement())
    name                String
    type                String
    description         String?              @db.Text
    buildings           Building[]
    maintenanceRequests MaintenanceRequest[]
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt

    @@unique([name, type])
    @@map("infrastructure_systems")
}

model Equipment {
    id                  Int                  @id @default(autoincrement())
    patrimonyTag        String?              @unique
    name                String
    description         String?              @db.Text
    location            String?
    serialNumber        String?
    manufacturer        String?
    model               String?
    acquisitionDate     DateTime?
    isActive            Boolean              @default(true)
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    maintenanceRequests MaintenanceRequest[]

    @@map("equipments")
}

// =================================================================
// ==                 MODELS PARA O FLUXO DE MANUTENÇÃO           ==
// =================================================================

model InfrastructureOccurrence {
    id                  Int                            @id @default(autoincrement())
    title               String
    description         String                         @db.Text
    locationDescription String?
    reportedAt          DateTime                       @default(now())
    status              InfrastructureOccurrenceStatus @default(REPORTED)
    duplicateOfId       Int?
    duplicateOf         InfrastructureOccurrence?      @relation("DuplicateOccurrences", fields: [duplicateOfId], references: [id], onDelete: NoAction)
    duplicates          InfrastructureOccurrence[]     @relation("DuplicateOccurrences")
    reinforcements      OccurrenceReinforcement[]
    spaceId             Int?
    space               Space?                         @relation(fields: [spaceId], references: [id], onDelete: SetNull)
    buildingId          Int?
    building            Building?                      @relation(fields: [buildingId], references: [id], onDelete: SetNull)
    reportedById        Int
    reportedBy          User                           @relation("ReportedOccurrences", fields: [reportedById], references: [id])
    diagnosis           Diagnosis?
    createdAt           DateTime                       @default(now()) @db.Timestamp(0)
    updatedAt           DateTime                       @updatedAt @db.Timestamp(0)

    @@index([reportedById, spaceId, buildingId, status, duplicateOfId])
    @@map("infrastructure_occurrences")
}

model OccurrenceReinforcement {
    occurrenceId Int
    occurrence   InfrastructureOccurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
    userId       Int
    user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    reinforcedAt DateTime                 @default(now())
    comment      String?

    @@id([occurrenceId, userId])
    @@map("occurrence_reinforcements")
}

enum InfrastructureOccurrenceStatus {
    REPORTED
    ANALYZING
    ACCEPTED
    DISMISSED
    RESOLVED
    DUPLICATE
}

model Diagnosis {
    id                   Int                      @id @default(autoincrement())
    diagnosticDetails    String                   @db.Text
    prognosis            String?                  @db.Text
    resolutionNotes      String?                  @db.Text
    outcome              DiagnosisOutcome         @default(PENDING)
    occurrenceId         Int                      @unique
    occurrence           InfrastructureOccurrence @relation(fields: [occurrenceId], references: [id], onDelete: Cascade)
    analyzedById         Int
    analyzedBy           User                     @relation("AnalyzedByUser", fields: [analyzedById], references: [id])
    diagnosedAt          DateTime                 @default(now())
    maintenanceRequestId Int?                     @unique
    maintenanceRequest   MaintenanceRequest?
    createdAt            DateTime                 @default(now())
    updatedAt            DateTime                 @updatedAt

    @@index([analyzedById])
    @@map("diagnoses")
}

enum DiagnosisOutcome {
    PENDING
    CREATE_REQUEST
    RESOLVED_ON_SITE
    DISMISS
    FORWARD_TO_OTHER
}

model MaintenanceRequest {
    id                           Int                             @id @default(autoincrement())
    protocolNumber               String                          @unique @default(uuid())
    title                        String
    description                  String                          @db.Text
    priority                     RequestPriority                 @default(NORMAL)
    requestedAt                  DateTime                        @default(now())
    deadline                     DateTime?
    solutionDetails              String?                         @db.Text
    completedAt                  DateTime?
    spaceId                      Int?
    space                        Space?                          @relation(fields: [spaceId], references: [id], onDelete: SetNull)
    buildingId                   Int?
    building                     Building?                       @relation(fields: [buildingId], references: [id], onDelete: SetNull)
    systemId                     Int?
    system                       InfrastructureSystem?           @relation(fields: [systemId], references: [id], onDelete: SetNull)
    equipmentId                  Int?
    equipment                    Equipment?                      @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
    currentMaintenanceInstanceId Int
    currentMaintenanceInstance   MaintenanceInstance             @relation("CurrentInstanceRequests", fields: [currentMaintenanceInstanceId], references: [id])
    createdById                  Int
    createdBy                    User                            @relation("CreatedByUser", fields: [createdById], references: [id])
    assignedToId                 Int?
    assignedTo                   User?                           @relation("AssignedToUser", fields: [assignedToId], references: [id])
    serviceTypeId                Int?
    serviceType                  ServiceType?                    @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull)
    statusId                     Int
    status                       MaintenanceRequestStatus        @relation(fields: [statusId], references: [id])
    currentStatus                MaintenanceRequestStatusOptions @default(PENDING)
    diagnosisId                  Int?                            @unique
    diagnosis                    Diagnosis?                      @relation(fields: [diagnosisId], references: [id], onDelete: SetNull)
    createdAt                    DateTime                        @default(now()) @db.Timestamp(0)
    updatedAt                    DateTime                        @updatedAt @db.Timestamp(0)
    timelineEvents               MaintenanceTimelineEvent[]
    materialRequests             MaterialRequest[]
    materialStockMovements       MaterialStockMovement[]
    materialWithdrawals          MaterialWithdrawal[]

    @@index([currentMaintenanceInstanceId, createdById, assignedToId, statusId, spaceId, buildingId, systemId, equipmentId, diagnosisId])
    @@map("maintenance_requests")
}

// =================================================================
// ==              MODELS DE SUPORTE E CONTEXTO                   ==
// =================================================================
model ServiceType {
    id                  Int                  @id @default(autoincrement())
    name                String               @unique
    description         String?
    isActive            Boolean              @default(true)
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    maintenanceRequests MaintenanceRequest[]

    @@map("service_types")
}

model MaintenanceInstance {
    id                            Int                        @id @default(autoincrement())
    sipacId                       String?                    @unique
    name                          String                     @unique
    isActive                      Boolean                    @default(true)
    createdAt                     DateTime                   @default(now())
    updatedAt                     DateTime                   @updatedAt
    currentMaintenanceRequests    MaintenanceRequest[]       @relation("CurrentInstanceRequests")
    timelineEventsTransferredFrom MaintenanceTimelineEvent[] @relation("TransferredFromInstanceEvents")
    timelineEventsTransferredTo   MaintenanceTimelineEvent[] @relation("TransferredToInstanceEvents")
    warehouses                    Warehouse[]

    @@map("maintenance_instances")
}

model MaintenanceTimelineEvent {
    id                        Int                 @id @default(autoincrement())
    type                      TimelineEventType   @default(COMMENT)
    description               String              @db.Text
    eventData                 Json?
    occurredAt                DateTime            @default(now())
    maintenanceRequestId      Int
    maintenanceRequest        MaintenanceRequest  @relation(fields: [maintenanceRequestId], references: [id])
    actionById                Int
    actionBy                  User                @relation("ActionByUser", fields: [actionById], references: [id])
    transferredFromInstanceId Int
    transferredToInstanceId   Int
    transferredFromInstance   MaintenanceInstance @relation("TransferredFromInstanceEvents", fields: [transferredFromInstanceId], references: [id])
    transferredToInstance     MaintenanceInstance @relation("TransferredToInstanceEvents", fields: [transferredToInstanceId], references: [id])
    createdAt                 DateTime            @default(now()) @db.Timestamp(0)
    updatedAt                 DateTime            @updatedAt @db.Timestamp(0)

    @@index([maintenanceRequestId, actionById])
    @@map("maintenance_timeline_events")
}

model MaintenanceRequestStatus {
    id                  Int                  @id @default(autoincrement())
    name                String               @unique
    description         String?
    isFinal             Boolean              @default(false)
    order               Int                  @default(0)
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    maintenanceRequests MaintenanceRequest[]

    @@map("maintenance_request_statuses")
}

// =================================================================
// ==                         ENUMS                               ==
// =================================================================

enum RequestPriority {
    LOW
    NORMAL
    HIGH
    URGENT
}

enum MaintenanceRequestStatusOptions {
    PENDING
    APPROVED
    IN_PROGRESS
    ON_HOLD
    COMPLETED
    REJECTED
    CANCELLED
}

enum TimelineEventType {
    CREATION
    COMMENT
    STATUS_CHANGE
    PRIORITY_CHANGE
    ASSIGNMENT
    UNASSIGNMENT
    TRANSFER_INITIATED
    SOLUTION_REGISTERED
    MATERIAL_REQUESTED
    MATERIAL_STATUS_CHANGED
    DEADLINE_CHANGED
    CLOSED
    REOPENED
    ASSET_CHANGED
    // NOVO EVENTO POSSÍVEL:
    DIAGNOSIS_REGISTERED
}
