// =================================================================
// ==                      MODELS DE MANUTENÇÃO                   ==
// =================================================================

model MaintenanceRequest {
    id                           Int                                @id @default(autoincrement())
    protocolNumber               String                             @unique @default(uuid())
    title                        String
    description                  String?                            @db.Text
    priorities                   MaintenanceRequestPriority[]
    requestedAt                  DateTime                           @default(now()) @db.Timestamp(0)
    deadline                     DateTime?
    solutionDetails              String?                            @db.Text
    completedAt                  DateTime?
    facilityComplex              InfrastructureFacilityComplex?     @relation(fields: [facilityComplexId], references: [id])
    facilityComplexId            String?
    buildingId                   String?
    building                     InfrastructureBuilding?            @relation(fields: [buildingId], references: [id], onDelete: SetNull)
    spaceId                      Int?
    space                        InfrastructureSpace?               @relation(fields: [spaceId], references: [id], onDelete: SetNull)
    local                        String?
    systemId                     Int?
    system                       InfrastructureSystem?              @relation(fields: [systemId], references: [id], onDelete: SetNull)
    // equipmentId                  Int?
    // equipment                    Equipment?                      @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
    currentMaintenanceInstanceId Int?
    currentMaintenanceInstance   MaintenanceInstance?               @relation("CurrentInstanceRequests", fields: [currentMaintenanceInstanceId], references: [id])
    createdById                  Int
    createdBy                    User                               @relation("CreatedByUser", fields: [createdById], references: [id])
    assignedToId                 Int?
    assignedTo                   User?                              @relation("AssignedToUser", fields: [assignedToId], references: [id])
    serviceTypeId                Int?
    serviceType                  MaintenanceServiceType?            @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull)
    statuses                     MaintenanceRequestStatus[]
    diagnosisId                  Int?                               @unique
    diagnosis                    InfrastructureOccurrenceDiagnosis? @relation(fields: [diagnosisId], references: [id], onDelete: SetNull)
    createdAt                    DateTime                           @default(now()) @db.Timestamp(0)
    updatedAt                    DateTime                           @updatedAt @db.Timestamp(0)
    timelineEvents               MaintenanceTimelineEvent[]
    materialRequests             MaterialRequest[]
    materialStockMovements       MaterialStockMovement[]
    materialWithdrawals          MaterialWithdrawal[]
    notes                        String?                            @db.Text

    // Relação 1-para-N com as Ordens de Serviço geradas
    serviceOrders MaintenanceServiceOrder[]

    //campos compatibilidade sipac
    //unidades
    sipacUnitRequestingId Int?
    sipacUnitRequesting   SipacUnidade? @relation("unidadeRequisitanteMaintenanceRequest", fields: [sipacUnitRequestingId], references: [id])
    sipacUnitCostId       Int?
    sipacUnitCost         SipacUnidade? @relation("unidadeCustoMaintenanceRequest", fields: [sipacUnitCostId], references: [id])

    sipacUserLoginRequest String? // usuario que realizou a requisicao
    origin                MaintenanceRequestOrigin @default(OCCURRENCE) // Origem da requisicao

    @@map("maintenance_requests")
}

// NOVO: Ordem de Serviço, uma tarefa executável ligada a uma Requisição de Manutenção.
model MaintenanceServiceOrder {
    id             Int                @id @default(autoincrement())
    title          String
    description    String?            @db.Text
    status         ServiceOrderStatus @default(PENDING)
    scheduledStart DateTime?
    scheduledEnd   DateTime?
    actualStart    DateTime?
    actualEnd      DateTime?

    // --- MUDANÇA AQUI ---
    // A responsabilidade primária é da EQUIPE.
    assignedTeamId Int
    assignedTeam   WorkerTeam @relation(fields: [assignedTeamId], references: [id])

    // As pessoas específicas são definidas na alocação.
    allocations MaintenanceServiceOrderAllocation[]
    // --------------------

    maintenanceRequestId Int
    maintenanceRequest   MaintenanceRequest        @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade)
    prerequisites        MaintenanceServiceOrder[] @relation("ServiceOrderDependencies")
    subsequentOrders     MaintenanceServiceOrder[] @relation("ServiceOrderDependencies")

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([maintenanceRequestId, assignedTeamId])
    @@map("maintenance_service_orders")
}

// =================================================================
// ==              MODELS DE SUPORTE E CONTEXTO                   ==
// =================================================================
model MaintenanceServiceType {
    id                  Int                  @id @default(autoincrement())
    name                String               @unique
    description         String?
    isActive            Boolean              @default(true)
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    maintenanceRequests MaintenanceRequest[]

    @@map("maintenance_service_types")
}

model MaintenanceInstance {
    id                            Int                             @id @default(autoincrement())
    sipacId                       String?                         @unique
    name                          String                          @unique
    isActive                      Boolean                         @default(true)
    createdAt                     DateTime                        @default(now()) @db.Timestamp(0)
    updatedAt                     DateTime                        @updatedAt @db.Timestamp(0)
    currentMaintenanceRequests    MaintenanceRequest[]            @relation("CurrentInstanceRequests")
    timelineEventsTransferredFrom MaintenanceTimelineEvent[]      @relation("TransferredFromInstanceEvents")
    timelineEventsTransferredTo   MaintenanceTimelineEvent[]      @relation("TransferredToInstanceEvents")
    warehouses                    Warehouse[]
    InfrastructureBuilding        InfrastructureBuilding[]
    InfrastructureFacilityComplex InfrastructureFacilityComplex[]

    @@map("maintenance_instances")
}

model MaintenanceTimelineEvent {
    id                        Int                 @id @default(autoincrement())
    type                      TimelineEventType   @default(COMMENT)
    description               String              @db.Text
    eventData                 Json?
    occurredAt                DateTime            @default(now())
    maintenanceRequestId      Int
    maintenanceRequest        MaintenanceRequest  @relation(fields: [maintenanceRequestId], references: [id])
    actionById                Int
    actionBy                  User                @relation("ActionByUser", fields: [actionById], references: [id])
    transferredFromInstanceId Int
    transferredToInstanceId   Int
    transferredFromInstance   MaintenanceInstance @relation("TransferredFromInstanceEvents", fields: [transferredFromInstanceId], references: [id])
    transferredToInstance     MaintenanceInstance @relation("TransferredToInstanceEvents", fields: [transferredToInstanceId], references: [id])
    createdAt                 DateTime            @default(now()) @db.Timestamp(0)
    updatedAt                 DateTime            @updatedAt @db.Timestamp(0)

    @@index([maintenanceRequestId, actionById])
    @@map("maintenance_timeline_events")
}

model MaintenanceRequestStatus {
    status               MaintenanceRequestStatusOptions @default(PENDING)
    maintenanceRequestId Int
    description          String?
    isFinal              Boolean                         @default(false)
    order                Int                             @default(0)
    createdAt            DateTime                        @default(now()) @db.Timestamp(0)
    updatedAt            DateTime                        @updatedAt @db.Timestamp(0)
    maintenanceRequest   MaintenanceRequest              @relation(fields: [maintenanceRequestId], references: [id])

    @@id([status, maintenanceRequestId, createdAt])
    @@map("maintenance_request_statuses")
}

// NOVO: Modelo que aloca um profissional específico para uma Ordem de Serviço.
model MaintenanceServiceOrderAllocation {
    // Relações
    serviceOrderId Int
    serviceOrder   MaintenanceServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)

    workerId Int
    worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)

    // Papel na OS
    isLeader Boolean @default(false) // Indica se este profissional é o líder desta OS específica.

    // Metadados
    allocatedAt   DateTime @default(now())
    allocatedById Int? // Opcional: quem fez a alocação
    allocatedBy   User?    @relation("AllocatedByUser", fields: [allocatedById], references: [id], onDelete: SetNull)

    // Garante que um profissional só pode ser alocado uma vez para a mesma OS.
    @@id([serviceOrderId, workerId])
    @@map("maintenance_service_order_allocations")
}

// NOVO: Enum para o ciclo de vida de uma Ordem de Serviço.
enum ServiceOrderStatus {
    PENDING // Aguardando agendamento/recursos
    SCHEDULED // Agendada com data e equipe
    IN_PROGRESS // Em execução
    ON_HOLD // Pausada (ex: aguardando material chegar)
    COMPLETED // Concluída com sucesso
    CANCELLED // Cancelada
}

model MaintenanceRequestPriority {
    id                   Int                 @id @default(autoincrement())
    priority             Int
    maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
    maintenanceRequestId Int?
    createdAt            DateTime            @default(now()) @db.Timestamp(0)
    updatedAt            DateTime            @updatedAt @db.Timestamp(0)

    @@index([maintenanceRequestId])
    @@map("maintenance_request_priorities")
}

// =================================================================
// ==                         ENUMS                               ==
// =================================================================

enum MaintenanceRequestStatusOptions {
    PENDING
    APPROVED
    IN_PROGRESS
    ON_HOLD
    COMPLETED
    REJECTED
    CANCELLED
}

enum TimelineEventType {
    CREATION
    COMMENT
    STATUS_CHANGE
    PRIORITY_CHANGE
    ASSIGNMENT
    UNASSIGNMENT
    TRANSFER_INITIATED
    SOLUTION_REGISTERED
    MATERIAL_REQUESTED
    MATERIAL_STATUS_CHANGED
    DEADLINE_CHANGED
    CLOSED
    REOPENED
    ASSET_CHANGED
    // NOVO EVENTO POSSÍVEL:
    DIAGNOSIS_REGISTERED
}

enum MaintenanceRequestOrigin {
    OCCURRENCE  @map("OCORRÊNCIA")
    IMPROVEMENT @map("MELHORIA")
    SIPAC       @map("SIPAC")
}
