// --------------- REQUISIÇÃO DE MANUTENÇÃO ---------------
model MaintenanceRequest {
    id              Int             @id @default(autoincrement())
    protocolNumber  String          @unique @default(uuid())
    title           String
    description     String          @db.Text // Pode ser um resumo ou vir das InfrastructureOccurrences
    priority        RequestPriority @default(NORMAL)
    requestedAt     DateTime        @default(now())
    deadline        DateTime?
    solutionDetails String?         @db.Text
    completedAt     DateTime?

    currentMaintenanceInstanceId Int
    currentMaintenanceInstance   MaintenanceInstance @relation("CurrentInstanceRequests", fields: [currentMaintenanceInstanceId], references: [id])

    createdById Int
    createdBy   User @relation("CreatedByUser", fields: [createdById], references: [id]) // Quem formalmente abriu a RM

    assignedToId Int?
    assignedTo   User? @relation("AssignedToUser", fields: [assignedToId], references: [id])

    equipmentId Int? // Pode ser preenchido a partir da InfrastructureOccurrence principal
    equipment   Equipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)

    serviceTypeId Int?
    serviceType   ServiceType? @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull)

    statusId Int
    status   MaintenanceRequestStatus @relation(fields: [statusId], references: [id])

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    // Relações
    // Ocorrências de infraestrutura que originaram esta requisição
    originatingOccurrences InfrastructureOccurrence[] @relation("OriginatingOccurrences")

    // Histórico de eventos/ações desta requisição
    timelineEvents MaintenanceTimelineEvent[]

    materialRequests MaterialRequest[]

    @@index([currentMaintenanceInstanceId])
    @@index([createdById])
    @@index([assignedToId])
    @@index([statusId])
    @@map("maintenanceRequests")
}

enum RequestPriority {
    LOW
    NORMAL
    HIGH
    URGENT
}

// --------------- STATUS DA REQUISIÇÃO DE MANUTENÇÃO ---------------
// Pode ser um Enum se os status forem fixos e simples,
// mas um model permite mais flexibilidade (descrições, cores, etc.)
model MaintenanceRequestStatus {
    id          Int      @id @default(autoincrement())
    name        String   @unique // Ex: "Aberta", "Em Análise", "Aguardando Peças", "Em Execução", "Concluída", "Cancelada", "Transferida"
    description String?
    isFinal     Boolean  @default(false) // Indica se este status encerra a requisição (Concluída, Cancelada)
    order       Int      @default(0) // Para ordenação na UI
    createdAt   DateTime @default(now()) @db.Timestamp(0)
    updatedAt   DateTime @updatedAt @db.Timestamp(0)

    maintenanceRequests MaintenanceRequest[]

    @@map("maintenanceRequestStatuses")
}

// --------------- EVENTOS DA LINHA DO TEMPO DA REQUISIÇÃO DE MANUTENÇÃO ---------------
// Registra todo o histórico de ações DENTRO de uma MaintenanceRequest:
// criação, mudança de status, comentários, transferências, atribuições, etc.
model MaintenanceTimelineEvent {
    id          Int               @id @default(autoincrement())
    type        TimelineEventType @default(COMMENT) // Tipo do evento/ação
    description String            @db.Text // Descrição da ação (comentário, motivo da transferência, etc.)
    eventData   Json? // Campo JSON para armazenar dados estruturados do evento (ex: { oldStatus: "X", newStatus: "Y" })
    occurredAt  DateTime          @default(now())

    // --- Chaves Estrangeiras ---
    maintenanceRequestId Int
    maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade)

    // Usuário que realizou a ação/registrou o evento
    actionById Int
    actionBy   User @relation("ActionByUser", fields: [actionById], references: [id])

    // Campos específicos para transferência de núcleo
    transferredFromInstanceId Int?
    transferredToInstanceId   Int?
    transferredFromInstance   MaintenanceInstance? @relation("TransferredFromInstanceEvents", fields: [transferredFromInstanceId], references: [id], onDelete: SetNull) // Renomeada relação
    transferredToInstance     MaintenanceInstance? @relation("TransferredToInstanceEvents", fields: [transferredToInstanceId], references: [id], onDelete: SetNull) // Renomeada relação

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([maintenanceRequestId])
    @@index([actionById])
    @@index([type])
    @@index([transferredFromInstanceId])
    @@index([transferredToInstanceId])
    @@map("maintenanceTimelineEvents")
}

enum TimelineEventType {
    CREATION // RM Criada
    COMMENT // Adição de comentário
    STATUS_CHANGE // Mudança de Status da RM
    PRIORITY_CHANGE // Mudança de Prioridade
    ASSIGNMENT // Designação de técnico
    UNASSIGNMENT // Remoção de designação
    TRANSFER_INITIATED // Transferência entre núcleos iniciada
    // TRANSFER_ACCEPTED      // (Opcional) Transferência aceita pelo novo núcleo
    // TRANSFER_REJECTED      // (Opcional) Transferência rejeitada
    SOLUTION_REGISTERED // Solução da RM registrada
    MATERIAL_REQUESTED // Requisição de material criada
    MATERIAL_STATUS_CHANGED // Status de requisição de material alterado (aprovado, recebido, etc.)
    DEADLINE_CHANGED // Prazo alterado
    CLOSED // RM Fechada
    REOPENED // RM Reaberta
    LINKED_INFRA_OCCURRENCE // Vinculou uma InfrastructureOccurrence
    UNLINKED_INFRA_OCCURRENCE // Desvinculou uma InfrastructureOccurrence
}

// ... (MaintenanceInstance precisa ter os nomes de relação para timelineEvents atualizados)
model MaintenanceInstance {
    id        Int      @id @default(autoincrement())
    sipacId   String   @unique
    name      String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    currentMaintenanceRequests    MaintenanceRequest[]       @relation("CurrentInstanceRequests")
    timelineEventsTransferredFrom MaintenanceTimelineEvent[] @relation("TransferredFromInstanceEvents") // Atualizado
    timelineEventsTransferredTo   MaintenanceTimelineEvent[] @relation("TransferredToInstanceEvents") // Atualizado

    @@index([sipacId])
    @@map("maintenanceInstances")
}

enum MaterialRequestStatus {
    PENDING // Aguardando aprovação
    APPROVED // Aprovada, aguardando retirada/entrega
    REJECTED // Rejeitada
    PARTIALLY_DELIVERED // Parcialmente entregue
    DELIVERED // Totalmente entregue/utilizado
    CANCELLED // Cancelada
}

// --------------- TIPOS DE SERVIÇO (Opcional, para categorização) ---------------
model ServiceType {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    description String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now()) @db.Timestamp(0)
    updatedAt   DateTime @updatedAt @db.Timestamp(0)

    maintenanceRequests MaintenanceRequest[]

    @@map("serviceTypes")
}

// --------------- EQUIPAMENTOS (Opcional, mas comum) ---------------
model Equipment {
    id              Int       @id @default(autoincrement())
    patrimonyTag    String?   @unique // Número de patrimônio/tombo
    name            String
    description     String?   @db.Text
    location        String? // Localização física do equipamento
    serialNumber    String?
    manufacturer    String?
    model           String?
    acquisitionDate DateTime?
    isActive        Boolean   @default(true)
    createdAt       DateTime  @default(now()) @db.Timestamp(0)
    updatedAt       DateTime  @updatedAt @db.Timestamp(0)

    maintenanceRequests MaintenanceRequest[]

    @@map("equipments")
}

// --------------- OCORRÊNCIA DE INFRAESTRUTURA (Pré-Requisição) ---------------
// Registro inicial de um problema/anomalia percebido na infraestrutura ou equipamento.
// Pode ou não gerar uma MaintenanceRequest. Várias ocorrências podem ser agrupadas em uma MaintenanceRequest.
model InfrastructureOccurrence {
    id                  Int                            @id @default(autoincrement())
    title               String // Título breve da ocorrência
    description         String                         @db.Text // Descrição detalhada do problema observado
    locationDescription String? // Descrição textual da localização (ex: "Corredor do Bloco B, perto da sala 203")
    reportedAt          DateTime                       @default(now())
    status              InfrastructureOccurrenceStatus @default(REPORTED)
    resolutionNotes     String?                        @db.Text // Notas se for resolvida sem RM

    // --- Chaves Estrangeiras ---
    // Quem reportou a ocorrência
    reportedById Int
    reportedBy   User @relation("ReportedOccurrences", fields: [reportedById], references: [id])

    // Equipamento relacionado (opcional, pode ser um problema geral de infraestrutura)
    // equipmentId Int?
    // equipment   Equipment? @relation(fields: [equipmentId], references: [id], onDelete: SetNull)

    // Se esta ocorrência gerou/foi vinculada a uma Requisição de Manutenção
    maintenanceRequestId Int? // Opcional, pois nem toda ocorrência vira uma RM
    maintenanceRequest   MaintenanceRequest? @relation("OriginatingOccurrences", fields: [maintenanceRequestId], references: [id], onDelete: SetNull)

    // Campos para anexos (sugestão: armazenar URLs ou usar um serviço de storage)
    // attachmentUrls       String[]

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @db.Timestamp(0)

    @@index([reportedById])
    // @@index([equipmentId])
    @@index([maintenanceRequestId])
    @@index([status])
    @@map("infrastructureOccurrences")
}

// --------------- STATUS DA OCORRÊNCIA DE INFRAESTRUTURA ---------------
enum InfrastructureOccurrenceStatus {
    REPORTED // Recém reportada, aguardando análise
    ANALYZING // Em análise para decidir se vira uma RM
    ACCEPTED // Aceita, vinculada a uma RM ou aguardando criação de RM
    DISMISSED // Rejeitada/Descartada (ex: duplicada, não procede)
    RESOLVED // Resolvida sem necessidade de RM formal (ação rápida)
}
