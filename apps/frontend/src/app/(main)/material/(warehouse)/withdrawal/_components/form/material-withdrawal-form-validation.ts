import { z } from 'zod';
import {
  IMaterialWithdrawalAddForm,
  IMaterialWithdrawalItemAddForm
} from '../../withdrawal-types';
import { materialOperationOutDisplayMap } from '@/mappers/material-operations-mappers';

// Schema for a single item in the withdrawal form
const materialWithdrawalItemSchema = z.object({
  globalMaterialId: z.string().min(1, 'Material √© obrigat√≥rio.'),
  quantityWithdrawn: z.coerce
    .number()
    .min(0.0001, 'Quantidade retirada deve ser maior que 0.'),
  key: z.number()
});

// Schema for the main withdrawal form (add mode)
const materialWithdrawalFormBase = z.object({
  withdrawalNumber: z.string().optional(),
  withdrawalDate: z.date({
    required_error: 'Data da Retirada √© obrigat√≥ria.',
    invalid_type_error: 'Data inv√°lida.'
  }),
  warehouseId: z.coerce.number().min(1, 'Dep√≥sito √© obrigat√≥rio.'),
  processedByUserId: z.coerce.number().min(1, 'Processado por √© obrigat√≥rio.'),
  // Assumindo que `z.nativeEnum(materialOperationOutDisplayMap)` far√° com que
  // `movementTypeCode` contenha a *chave* do enum (ex: 'OUT_SERVICE_USAGE') como uma string.
  // Se `materialOperationOutDisplayMap` for um enum de string, o valor ser√° a pr√≥pria string.
  movementTypeCode: z.nativeEnum(materialOperationOutDisplayMap),
  notes: z.string().optional().nullable(),
  collectorType: z.string({
    required_error: 'Coletado por √© obrigat√≥rio.'
  }),
  collectedByUserId: z.coerce.number().optional().nullable(),
  collectedByWorkerId: z.coerce.number().optional().nullable(),
  collectedByOther: z.string().optional().nullable(),
  maintenanceRequestId: z.coerce.number().optional().nullable(),
  materialRequestId: z.coerce.number().optional().nullable(),
  materialPickingOrderId: z.coerce.number().optional().nullable(),
  legacy_place: z.string().optional().nullable(),
  items: z
    .array(materialWithdrawalItemSchema)
    .min(1, 'Adicione pelo menos um item √† retirada.')
});

// üîπ ADD mode
const materialWithdrawalFormSchemaAdd = materialWithdrawalFormBase
  .refine(
    (data) =>
      data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE ||
      !!data.maintenanceRequestId,
    {
      message: '√â necess√°rio associar uma requisi√ß√£o de manuten√ß√£o',
      path: ['maintenanceRequestId']
    }
  )
  .refine(
    (data) =>
      (data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE &&
        data.movementTypeCode !==
          materialOperationOutDisplayMap.OUT_EMERGENCY_USAGE) ||
      !(data.collectorType === 'user' && !data.collectedByUserId),
    {
      message: 'Coletado pelo usu√°rio √© obrigat√≥rio.',
      path: ['collectedByUserId']
    }
  )
  .refine(
    (data) =>
      (data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE &&
        data.movementTypeCode !==
          materialOperationOutDisplayMap.OUT_EMERGENCY_USAGE) ||
      !(data.collectorType === 'worker' && !data.collectedByWorkerId),
    {
      message: 'Coletado por funcion√°rio √© obrigat√≥rio.',
      path: ['collectedByWorkerId']
    }
  )
  .refine(
    (data) =>
      (data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE &&
        data.movementTypeCode !==
          materialOperationOutDisplayMap.OUT_EMERGENCY_USAGE) ||
      !(data.collectorType === 'other' && !data.collectedByOther),
    {
      message: 'Coletado por outro √© obrigat√≥rio.',
      path: ['collectedByOther']
    }
  )
  .refine(
    (data) =>
      // Se N√ÉO for OUT_EMERGENCY_USAGE, a regra passa (legacy_place √© opcional)
      data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_EMERGENCY_USAGE ||
      // OU, se FOR OUT_EMERGENCY_USAGE, legacy_place precisa ter um valor
      !!data.legacy_place,
    {
      message:
        'A informa√ß√£o do local de destino √© obrigat√≥ria para usos em servi√ßo de manuten√ß√£o com urg√™ncia (sem requisi√ß√£o de manuten√ß√£o associada)',
      path: ['legacy_place']
    }
  );

// üîπ EDIT mode
const materialWithdrawalFormSchemaEdit = materialWithdrawalFormBase
  .extend({
    id: z.coerce.number()
  })
  .refine(
    (data) =>
      data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE ||
      !(data.collectorType === 'user' && !data.collectedByUserId),
    {
      message: 'Coletado pelo usu√°rio √© obrigat√≥rio.',
      path: ['collectedByUserId']
    }
  )
  .refine(
    (data) =>
      data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE ||
      !(data.collectorType === 'worker' && !data.collectedByWorkerId),
    {
      message: 'Coletado por funcion√°rio √© obrigat√≥rio.',
      path: ['collectedByWorkerId']
    }
  )
  .refine(
    // Adicionado para consist√™ncia, o modo EDIT tamb√©m deve ter esta valida√ß√£o condicional
    (data) =>
      data.movementTypeCode !==
        materialOperationOutDisplayMap.OUT_SERVICE_USAGE ||
      !(data.collectorType === 'other' && !data.collectedByOther),
    {
      message: 'Coletado por outro √© obrigat√≥rio.',
      path: ['collectedByOther']
    }
  );

export type MaterialWithdrawalFormSchemaAdd = z.infer<
  typeof materialWithdrawalFormSchemaAdd
>;
export type MaterialWithdrawalFormSchemaEdit = z.infer<
  typeof materialWithdrawalFormSchemaEdit
>;
export { materialWithdrawalFormSchemaAdd, materialWithdrawalFormSchemaEdit };
